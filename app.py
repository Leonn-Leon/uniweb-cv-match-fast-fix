# app.py
import json
from pathlib import Path
import numpy as np
import pandas as pd
import streamlit as st
from copy import deepcopy
from loguru import logger
import datetime 
import requests
import re
import time
from urllib.parse import quote
from src.utils.scraper_api import build_search_params, launch_pipeline, track_task_progress
from typing import List
from concurrent.futures import ThreadPoolExecutor, as_completed

# –ò–º–ø–æ—Ä—Ç –≤–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from src.utils.utils import Mode, load_data, load_model, df2dict
from src.ui import common_ui, mass_ui, prof_ui # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∏ –º–æ–¥—É–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Session State ---
if "computed" not in st.session_state:
    st.session_state["computed"] = False
if "vahta_mode" not in st.session_state:
    st.session_state["vahta_mode"] = False
if "distance_option" not in st.session_state:
    st.session_state["distance_option"] = "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
if "original_address_weight" not in st.session_state: 
    st.session_state.original_address_weight = None

# –ù–æ–≤—ã–µ –∫–ª—é—á–∏ –¥–ª—è session_state
if "huntflow_vacancies_list" not in st.session_state: # –°–ø–∏—Å–æ–∫ –¥–ª—è selectbox (–æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ_–∏–º—è, id)
    st.session_state.huntflow_vacancies_list = [] 
if "huntflow_vacancies_details" not in st.session_state: # –°–ª–æ–≤–∞—Ä—å {vacancy_id: –ø–æ–ª–Ω—ã–µ_–¥–µ—Ç–∞–ª–∏_–≤–∞–∫–∞–Ω—Å–∏–∏}
    st.session_state.huntflow_vacancies_details = {} 
if "selected_huntflow_vacancy_id" not in st.session_state: # ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ Huntflow
    st.session_state.selected_huntflow_vacancy_id = None

# –ö–ª—é—á–∏ –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ mass_ui.py –∏—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç)
if "vacancy_form_title" not in st.session_state:
    st.session_state.vacancy_form_title = ""
if "vacancy_form_required" not in st.session_state:
    st.session_state.vacancy_form_required = ""
if "vacancy_form_location" not in st.session_state:
    st.session_state.vacancy_form_location = ""
if "vacancy_form_optional" not in st.session_state:
    st.session_state.vacancy_form_optional = ""
# --- –ö–æ–Ω–µ—Ü –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Session State ---

st.title("–ü–æ–¥–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ üíº")

current_mode = Mode.MASS # –ü–æ–∫–∞ –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π –ø–æ–¥–±–æ—Ä

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ ---
if current_mode == Mode.PROF:
    selector, config = load_model(config_path="./config/config.yaml")
else: # Mode.MASS
    selector, config = load_model(config_path="./config/config_mass.yaml")


with open("data/processed/mass/resual_regions.json", "r", encoding="utf-8") as f:
    resual_regions = json.load(f)

if not selector or not config:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –†–∞–±–æ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    st.stop()

if 'current_threshold' not in st.session_state: # –ü–æ—Ä–æ–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    st.session_state['current_threshold'] = config["model"]["stage_2"]["score_threshold"]


# --- Callback –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞ "–í–∞—Ö—Ç–∞" ---
def update_address_weight_callback():
    try:
        df = st.session_state["df_weights"]
        is_vahta = st.session_state["vahta_mode"]
        address_index_list = df.index[df['–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞'] == '–ê–¥—Ä–µ—Å'].tolist()
        if not address_index_list: return
        address_index = address_index_list[0]
        current_weight = df.loc[address_index, '–í–µ—Å']
        if is_vahta:
            if current_weight != 0.0:
                st.session_state.original_address_weight = current_weight
                df.loc[address_index, '–í–µ—Å'] = 0.0
                st.toast("–í–µ—Å '–ê–¥—Ä–µ—Å' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 0 (–í–∞—Ö—Ç–∞).", icon="‚ö†Ô∏è")
        else:
            if st.session_state.original_address_weight is not None:
                if current_weight == 0.0: 
                    df.loc[address_index, '–í–µ—Å'] = st.session_state.original_address_weight
                    st.toast(f"–í–µ—Å '–ê–¥—Ä–µ—Å' –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {st.session_state.original_address_weight}", icon="üëç")
        st.session_state["df_weights"] = df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Å–∞ '–ê–¥—Ä–µ—Å': {e}")

HUNTFLOW_BASE_URL = st.secrets.get("HUNTFLOW_BASE_URL")

def get_huntflow_proxies():
    proxy_user = st.secrets.get("HUNTFLOW_PROXY_USER")
    proxy_pass = st.secrets.get("HUNTFLOW_PROXY_PASS")
    proxy_host = st.secrets.get("HUNTFLOW_PROXY_HOST")
    proxy_port = st.secrets.get("HUNTFLOW_PROXY_PORT")

    if all([proxy_user, proxy_pass, proxy_host, proxy_port]):
        proxy_url = f"http://{proxy_user}:{proxy_pass}@{proxy_host}:{proxy_port}"
        return {
            "http": proxy_url,
            "https": proxy_url,
        }
    return None

import json
import requests
import streamlit as st
from pathlib import Path

def fetch_huntflow_vacancies(page_size: int = 100,
                                       save_dir: str = "vacancies_json"):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ, –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π JSON-—Ñ–∞–π–ª,
    –∞ –≤ session_state –∫–ª–∞–¥—ë—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–Ω–∞–∑–≤–∞–Ω–∏–µ, id).
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º token
    hf_token = st.secrets.get("HUNTFLOW_API_TOKEN")
    hf_account_id = st.secrets.get("HUNTFLOW_ACCOUNT_ID", "2")
    if not hf_token:
        st.error("HUNTFLOW_API_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ secrets.toml")
        return [], {}

    headers = {"Authorization": f"Bearer {hf_token}"}
    url = f"{HUNTFLOW_BASE_URL}/accounts/{hf_account_id}/vacancies"
    proxies = get_huntflow_proxies()

    # –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è JSON-—Ñ–∞–π–ª–æ–≤
    out_folder = Path(save_dir)
    out_folder.mkdir(exist_ok=True)

    vacancy_list = []
    vacancy_details = {}

    offset = 0
    while True:
        params = {
            "state": "OPEN",
            "count": page_size,
            "page": int(offset/page_size)+1,
            "opened": False
        }
        try:
            resp = requests.get(url, headers=headers, params=params, proxies=proxies)
            resp.raise_for_status()
        except requests.RequestException as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Huntflow API: {e}, response: {resp.json()}")
            break

        logger.debug(f"–ó–∞–≥—Ä—É–∂–µ–Ω –ª–∏—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–π")

        items = resp.json().get("items", [])
        if not items:
            break

        for vac in items:
            vac_id = vac.get("id")
            title = vac.get("position", f"–í–∞–∫–∞–Ω—Å–∏—è #{vac_id}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∞
            vacancy_list.append((title, vac_id))
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç –≤ —Ñ–∞–π–ª
            file_path = out_folder / f"vacancy_{vac_id}.json"
            with file_path.open("w", encoding="utf-8") as f:
                json.dump(vac, f, ensure_ascii=False, indent=2)

            # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –≤ –ø–∞–º—è—Ç–∏ –ª–∏—à—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥
            vacancy_details[vac_id] = str(file_path)

        offset += len(items)
        # –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
        # st.write(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {offset} –≤–∞–∫–∞–Ω—Å–∏–π‚Ä¶")
        # logger.info(items[0])

    return vacancy_list, vacancy_details

def get_hh_contacts_api(resume_id, access_token_ext=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å HH.ru."""
    try:
        hh_token = access_token_ext
        if not hh_token: st.error("–¢–æ–∫–µ–Ω HH.ru API –Ω–µ –Ω–∞–π–¥–µ–Ω."); return None
        headers = {"Authorization": f"Bearer {hh_token}", "User-Agent": "Uniweb CV Match App"}
        resume_url = f"https://api.hh.ru/resumes/{resume_id}?get_with_contact=true"
        r_resume = requests.get(resume_url, headers=headers)
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:"+ str(r_resume.json()))
        r_resume.raise_for_status()
        r_contacts = r_resume.json().get("contact")
        print(f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {r_contacts}", type(r_contacts))
        if not r_contacts or (isinstance(r_contacts, list) and len(r_contacts) == 0):
            logger.debug("–î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≥–ª—É–±–∂–µ")
            contacts_href = r_resume.json().get("actions").get('get_with_contact').get("url")
            if not contacts_href:
                st.warning(f"–ù–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã HH {resume_id}."); return None
            r_resume = requests.get(contacts_href, headers=headers)
            logger.debug(f"–ì–ª—É–±–æ–∫–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã: {r_resume.json()}")
            r_resume.raise_for_status()
            r_contacts = r_resume.json().get("contact")
        details = {"first_name": r_resume.json().get("first_name", ""), "last_name": r_resume.json().get("last_name", ""),
                   "middle_name": r_resume.json().get("middle_name", ""), "phone": "", "email": "empty_email@error.ru"}
        # if r_contacts[0].get("type").get("id") == "email":
        #     details["email"] = r_contacts[0].get("value", "")
        #     details["phone"] = r_contacts[1].get("value", "").get("formatted")
        # elif r_contacts[0].get("type").get("id") == "cell":
        #     details["phone"] = r_contacts[0].get("value").get("formatted")
        #     details["email"] = r_contacts[1].get("value")
        for contact in r_contacts:
            if contact.get("type").get("id") == "email":
                details["email"] = contact.get("value", "")
            elif contact.get("type").get("id") == "cell":
                details["phone"] = contact.get("value").get("formatted")
        return details
    except requests.exceptions.RequestException as e: st.error(f"–û—à–∏–±–∫–∞ API HH.ru ({resume_id}): {e}"); return {}
    except Exception as e: st.error(f"–û—à–∏–±–∫–∞ (HH contacts {resume_id}): {e}"); return {}

def get_avito_contacts_api(resume_id, access_token_ext=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å Avito."""
    try:
        avito_token = access_token_ext
        if not avito_token: st.error("–¢–æ–∫–µ–Ω Avito API –Ω–µ –Ω–∞–π–¥–µ–Ω."); return None
        headers = {"Authorization": f"Bearer {avito_token}", "Accept": "application/json", "User-Agent": "Uniweb CV Match App"}
        url = f"https://api.avito.ru/job/v1/resumes/{resume_id}/contacts/"
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        logger.debug(response.json())
        FIO = response.json().get("full_name")
        if FIO:
            details = {"first_name": FIO.get("first_name", ""), "last_name": FIO.get("last_name", ""),
                    "middle_name": FIO.get("patronymic", ""), "phone": "", "email": "empty_email@error.ru"}
        else:
            details = {"first_name": response.json().get("name", ""), "last_name": "",
                       "middle_name": "", "phone": "", "email": "empty_email@error.ru"}
        r_contacts = response.json().get("contacts")
        for contact in r_contacts:
            if contact.get("type") == "e-mail":
                details["email"] = contact.get("value", "")
            elif contact.get("type") == "phone":
                details["phone"] = contact.get("value", "")
        return details
    except requests.exceptions.RequestException as e: st.error(f"–û—à–∏–±–∫–∞ API Avito ({resume_id}): {e}"); return None
    except Exception as e: st.error(f"–û—à–∏–±–∫–∞ (Avito contacts {resume_id}): {e}"); return None

def _extract_pii_details(pii_data, source):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ PII –∏–∑ –æ—Ç–≤–µ—Ç–∞ HH/Avito."""
    details = {"first_name": "–ù–µ–∏–∑–≤.", "last_name": "–ù–µ–∏–∑–≤.", "middle_name": "", "phone": "", "email": ""}
    if not pii_data: return details

    details["first_name"] = pii_data.get("first_name", "–ù–µ–∏–∑–≤.")
    details["last_name"] = pii_data.get("last_name", "–ù–µ–∏–∑–≤.")
    details["middle_name"] = pii_data.get("middle_name", "")
    details["phone"] = pii_data.get("phone", "")
    details["email"] = pii_data.get("email", "")
    return details


def create_huntflow_applicant_api(pii_standardized, candidate_ml_data, source_resume_id, source_type_for_hf):
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ Huntflow (—à–∞–≥ 1)."""
    proxies = get_huntflow_proxies()
    try:
        hf_token = st.secrets.get("HUNTFLOW_API_TOKEN")
        hf_account_id = st.secrets.get("HUNTFLOW_ACCOUNT_ID", "2")
        if not hf_token: return None, "–¢–æ–∫–µ–Ω Huntflow API –Ω–µ –Ω–∞–π–¥–µ–Ω."
        headers = {"Authorization": f"Bearer {hf_token}", "Content-Type": "application/json"}
        url = f"{HUNTFLOW_BASE_URL}/accounts/{hf_account_id}/applicants"
        body = {
            "last_name": pii_standardized["last_name"], "first_name": pii_standardized["first_name"],
            "middle_name": pii_standardized["middle_name"], "phone": pii_standardized["phone"],
            "email": pii_standardized["email"],
            "position": candidate_ml_data.get("–î–æ–ª–∂–Ω–æ—Å—Ç—å", ""),
            "money": str(candidate_ml_data.get("–ó–∞—Ä–ø–ª–∞—Ç–∞", "")),
            "photo": None,
            "externals": [{"auth_type": "NATIVE", "id": source_resume_id, 
                           "data": {"body": f"–ö–∞–Ω–¥–∏–¥–∞—Ç –∏–∑ {source_type_for_hf}. –°–∫–æ—Ä–∏–Ω–≥: {candidate_ml_data.get('sim_score_second', '')}%"} }]
        }
        logger.debug(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ HF: {body}")
        response = requests.post(url, headers=headers, json=body, proxies=proxies, timeout=10)
        logger.debug(f"–°–æ–∑–¥–∞–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç –≤ HF: {response.json()}")
        response.raise_for_status()
        return response.json().get("id"), None
        # return source_resume_id, None
    except requests.exceptions.RequestException as e: return None, f"API HF (—Å–æ–∑–¥–∞–Ω–∏–µ): {e.response.text if e.response else e}"
    except Exception as e: return None, f"–û—à–∏–±–∫–∞ HF (—Å–æ–∑–¥–∞–Ω–∏–µ): {e}"

def fill_huntflow_questionary_api(hf_applicant_id, candidate_ml_data):
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∫–µ—Ç—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ Huntflow (—à–∞–≥ 2, —É–ø—Ä–æ—â–µ–Ω–Ω–æ)."""
    try:
        proxies = get_huntflow_proxies()

        hf_token = st.secrets.get("HUNTFLOW_API_TOKEN")
        hf_account_id = st.secrets.get("HUNTFLOW_ACCOUNT_ID", "2")
        if not hf_token: return False, "–¢–æ–∫–µ–Ω Huntflow API –Ω–µ –Ω–∞–π–¥–µ–Ω."
        headers = {"Authorization": f"Bearer {hf_token}", "Content-Type": "application/json"}
        url = f"{HUNTFLOW_BASE_URL}/accounts/{hf_account_id}/applicants/{hf_applicant_id}/questionary"
        body = { # –£–ø—Ä–æ—â–µ–Ω–æ - –Ω—É–∂–Ω—ã ID –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –º–Ω–æ–≥–∏—Ö –ø–æ–ª–µ–π
            "experience": int(candidate_ml_data.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–ª–µ—Ç)", 0)) if candidate_ml_data.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–ª–µ—Ç)") else None,
            "experience_description": candidate_ml_data.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", "") # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        }
        body_filtered = {k: v for k, v in body.items() if v is not None}
        if not body_filtered: return True, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∫–µ—Ç—ã."
        response = requests.post(url, headers=headers, json=body_filtered, proxies=proxies, timeout=10)
        response.raise_for_status()
        return True, None
    except requests.exceptions.RequestException as e: return False, f"API HF (–∞–Ω–∫–µ—Ç–∞): {e.response.text if e.response else e}"
    except Exception as e: return False, f"–û—à–∏–±–∫–∞ HF (–∞–Ω–∫–µ—Ç–∞): {e}"

def link_applicant_to_vacancy_api(hf_applicant_id, hf_vacancy_id, score_percentage):
    """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ Huntflow."""
    try:
        proxies = get_huntflow_proxies()
        hf_token = st.secrets.get("HUNTFLOW_API_TOKEN")
        hf_account_id = st.secrets.get("HUNTFLOW_ACCOUNT_ID", "2")
        if not hf_token: return False, "–¢–æ–∫–µ–Ω Huntflow API –Ω–µ –Ω–∞–π–¥–µ–Ω."
        if not hf_vacancy_id: return True, "ID –≤–∞–∫–∞–Ω—Å–∏–∏ HF –Ω–µ —É–∫–∞–∑–∞–Ω."
        headers = {"Authorization": f"Bearer {hf_token}", "Content-Type": "application/json"}
        url = f"{HUNTFLOW_BASE_URL}/accounts/{hf_account_id}/applicants/{hf_applicant_id}/vacancy"
        body = {
            "vacancy": hf_vacancy_id, "status": 21, # –°—Ç–∞—Ç—É—Å –∏–∑ –¢–ó
            "comment": f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–∫–æ—Ä–∏–Ω–≥–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç: {score_percentage}%"
        }
        response = requests.post(url, headers=headers, json=body, proxies=proxies, timeout=10)
        response.raise_for_status()
        return True, None
    except requests.exceptions.RequestException as e: return False, f"API HF (–ø—Ä–∏–≤—è–∑–∫–∞): {e.response.text if e.response else e}"
    except Exception as e: return False, f"–û—à–∏–±–∫–∞ HF (–ø—Ä–∏–≤—è–∑–∫–∞): {e}"

def parse_resume_link(link_url):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ ('hh' –∏–ª–∏ 'avito') –∏ ID —Ä–µ–∑—é–º–µ –∏–∑ URL.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (source, resume_id) –∏–ª–∏ (None, None) –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏.
    """
    if not link_url or not isinstance(link_url, str):
        logger.warning(f"–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link_url}")
        return None, None

    hh_match = re.search(r"hh\.ru/resume/([a-f0-9]{32,})", link_url, re.IGNORECASE) # HH ID –æ–±—ã—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π hex
    if hh_match:
        return "hh", hh_match.group(1)
    
    avito_match = re.search(r"avito\.ru/job/v1/resumes/(\d+)/contacts/?", link_url, re.IGNORECASE)
    if avito_match:
        return "avito", avito_match.group(1)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ (–º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–µ)
    if "hh.ru" in link_url:
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å ID –∏–∑ –±–æ–ª–µ–µ –æ–±—â–∏—Ö —Å—Å—ã–ª–æ–∫ HH, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        hh_generic_match = re.search(r"hh\.ru/.*\?resume=([a-f0-9]+)", link_url, re.IGNORECASE)
        if hh_generic_match:
            return "hh", hh_generic_match.group(1)
        logger.warning(f"–°—Å—ã–ª–∫–∞ HH.ru –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID: {link_url}")
        return "hh", None # –ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–≤–µ—Å—Ç–µ–Ω, ID –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω
        
    if "avito.ru" in link_url:
         # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å ID –∏–∑ –±–æ–ª–µ–µ –æ–±—â–∏—Ö —Å—Å—ã–ª–æ–∫ Avito
        avito_generic_match = re.search(r"avito\.ru/(?:.+/)?(?:rezume(?:/.+)?_|\w+/|items/)(\d+)", link_url, re.IGNORECASE)
        if avito_generic_match:
            return "avito", avito_generic_match.group(1)
        logger.warning(f"–°—Å—ã–ª–∫–∞ Avito –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID: {link_url}")
        return "avito", None # –ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–≤–µ—Å—Ç–µ–Ω, ID –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω

    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ ID –∏–∑ —Å—Å—ã–ª–∫–∏: {link_url}")
    return None, None

def get_hh_oauth_token():
    refresh_token = st.secrets.get("HH_REFRESH_TOKEN")

    logger.info("HH: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ access token...")
    token_url = st.secrets.get("HH_TOKEN_URL")

    payload = {
        'grant_type': 'refresh_token',
        'refresh_token': refresh_token,
    }
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded'
    }

    try:
        response = requests.post(token_url, data=payload, headers=headers)
        logger.info("–ü–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞: "+str(response.json()))
        response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏
        token_data = response.json()
        
        new_access_token = token_data.get('access_token')

        if new_access_token:
            st.secrets["HH_API_TOKEN"] = new_access_token
            st.secrets["HH_REFRESH_TOKEN"] = token_data.get('refresh_token')
            st.success("HH.ru: Access token —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.")
            logger.info("HH.ru: Access token —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.")
            return new_access_token
        else:
            st.error(f"HH.ru: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å 'access_token' –∏–∑ –æ—Ç–≤–µ—Ç–∞. –û—Ç–≤–µ—Ç: {token_data}")
            logger.error(f"HH.ru: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å 'access_token' –∏–∑ –æ—Ç–≤–µ—Ç–∞. –û—Ç–≤–µ—Ç: {token_data}")
            return st.secrets["HH_API_TOKEN"]
    except requests.exceptions.RequestException as e:
        st.error(f"HH.ru: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        logger.error(f"HH.ru: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return st.secrets["HH_API_TOKEN"]

AVITO_ACCESS_TOKEN_KEY = "avito_access_token_val"
AVITO_TOKEN_EXPIRES_AT_KEY = "avito_token_expires_at_val"

def get_avito_oauth_token():
    access_token = st.session_state.get(AVITO_ACCESS_TOKEN_KEY)
    expires_at = st.session_state.get(AVITO_TOKEN_EXPIRES_AT_KEY)

    if access_token and expires_at and time.time() < expires_at:
        logger.debug("Avito: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω.")
        return access_token

    logger.info("Avito: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ access token...")
    token_url = st.secrets.get("AVITO_TOKEN_URL") # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å "https://api.avito.ru/token/"
    client_id = st.secrets.get("AVITO_CLIENT_ID")
    client_secret = st.secrets.get("AVITO_CLIENT_SECRET")

    if not all([token_url, client_id, client_secret]):
        st.error("Avito: CLIENT_ID, CLIENT_SECRET –∏–ª–∏ TOKEN_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö.")
        logger.error("Avito: CLIENT_ID, CLIENT_SECRET –∏–ª–∏ TOKEN_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö.")
        return None

    payload = {
        'grant_type': 'client_credentials',
        'client_id': client_id,
        'client_secret': client_secret
    }
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded'
    }

    try:
        response = requests.post(token_url, data=payload, headers=headers)
        response.raise_for_status()
        token_data = response.json()

        new_access_token = token_data.get('access_token')
        expires_in = token_data.get('expires_in', 86400) # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –ø–æ –¥–µ—Ñ–æ–ª—Ç—É —Å—É—Ç–∫–∏ (86400 —Å–µ–∫)

        if new_access_token and isinstance(expires_in, int):
            st.session_state[AVITO_ACCESS_TOKEN_KEY] = new_access_token
            st.session_state[AVITO_TOKEN_EXPIRES_AT_KEY] = time.time() + expires_in - 60 # –ë—É—Ñ–µ—Ä
            st.success("Avito: Access token —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.")
            logger.info("Avito: Access token —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.")
            return new_access_token
        else:
            st.error(f"Avito: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å 'access_token' –∏–ª–∏ 'expires_in' –∏–∑ –æ—Ç–≤–µ—Ç–∞. –û—Ç–≤–µ—Ç: {token_data}")
            logger.error(f"Avito: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å 'access_token' –∏–ª–∏ 'expires_in' –∏–∑ –æ—Ç–≤–µ—Ç–∞. –û—Ç–≤–µ—Ç: {token_data}")
            return None
    except requests.exceptions.RequestException as e:
        st.error(f"Avito: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        logger.error(f"Avito: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        if hasattr(e, 'response') and e.response is not None:
            try:
                st.json(e.response.json())
                logger.error(f"Avito: –¢–µ–ª–æ –æ—à–∏–±–∫–∏: {e.response.json()}")
            except ValueError:
                st.text(e.response.text)
                logger.error(f"Avito: –¢–µ–ª–æ –æ—à–∏–±–∫–∏ (–Ω–µ JSON): {e.response.text}")
        return None
    
def get_region_name_by_id(region_rusal_id):
    # region_rusal_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å int
    for region in resual_regions.get("fields", []):
        if region.get("id") == region_rusal_id:
            return region.get("name")
    return ""

# CHAT2DESK_BASE_URL = "https://m.bot-marketing.com/api/public/tunnelSessions"
CHAT2DESK_BASE_URL = "https://ror.chat2desk.com/webhooks/smart_script/LoC5G7r"

def sanitize_vacancy_name(name_str):
    """–£–¥–∞–ª—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, —Ç–∏—Ä–µ, —Ç–æ—á–∫–∏."""
    if not name_str or not isinstance(name_str, str):
        return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ –±—É–∫–≤ (—Ä—É—Å—Å–∫–∏—Ö –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö), —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª–æ–≤, —Ç–∏—Ä–µ, —Ç–æ—á–µ–∫
    # –¢–∞–∫–∂–µ –∑–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
    sanitized = re.sub(r'[^\w\s\.\-–∞-—è–ê-–Ø—ë–Å]', '', name_str)
    sanitized = re.sub(r'\s+', ' ', sanitized).strip()
    return sanitized if sanitized else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"


def send_to_chat2desk_api(phone_number: str, 
                          client_name: str, 
                          hf_account_id: str, 
                          hf_vacancy_id: str, 
                          hf_applicant_id: str, 
                          vacancy_name_original: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏—é –¥–∏–∞–ª–æ–≥–∞ –≤ Chat2Desk."""
    
    chat2desk_session_id = st.secrets.get("CHAT2DESK_SESSION_ID", "bphgdRze7")
    chat2desk_code = st.secrets.get("CHAT2DESK_CODE", "rusal")

    if not chat2desk_session_id or not chat2desk_code:
        msg = "Chat2Desk: CHAT2DESK_SESSION_ID –∏–ª–∏ CHAT2DESK_CODE –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö."
        st.error(msg)
        logger.error(msg)
        return False, "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Chat2Desk"

    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ phone_number —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7XXXXXXXXXX
    phone_number = re.sub(r"\D", "", phone_number)
    if not (phone_number and phone_number.startswith('7') and len(phone_number) == 11 and phone_number.isdigit()):
        msg = f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è Chat2Desk: {phone_number}. –û–∂–∏–¥–∞–µ—Ç—Å—è 7XXXXXXXXXX."
        st.error(msg)
        logger.error(f"Chat2Desk: {msg}")
        return False, msg
    
    sanitized_vacancy_name_str = sanitize_vacancy_name(vacancy_name_original)

    params_for_url = {
        "code": chat2desk_code,
        "params[phonenumber]": phone_number,
        "params[nameclient]": client_name,
        "params[account_id]": str(hf_account_id),
        "params[vacancy_id]": str(hf_vacancy_id) if hf_vacancy_id else "",
        "params[application_id]": str(hf_applicant_id),
        "params[vacancyname]": sanitized_vacancy_name_str
    }

    param_pairs = [f"{quote(key)}={quote(str(value))}" for key, value in params_for_url.items()]
    url_with_params = f"{CHAT2DESK_BASE_URL}?{'&'.join(param_pairs)}"

    logger.info(f"Chat2Desk: –ó–∞–ø—Ä–æ—Å –Ω–∞ URL: {url_with_params}")
    
    ##############

    # params_for_url = {
    #     "code": chat2desk_code,
    #     "params[phonenumber]": 77770444258,
    #     "params[nameclient]": "–í—è—á–µ—Å–ª–∞–≤",
    #     "params[account_id]": str(2),
    #     "params[vacancy_id]": str(24295) if hf_vacancy_id else "",
    #     "params[application_id]": str(469314),
    #     "params[vacancyname]": "–≠–∫—Å–ø–µ—Ä—Ç"
    # }
    
    # param_pairs = [f"{quote(key)}={quote(str(value))}" for key, value in params_for_url.items()]
    # url_with_params = f"{CHAT2DESK_BASE_URL}?{'&'.join(param_pairs)}"

    # logger.info(f"Chat2Desk: –ó–∞–ø—Ä–æ—Å –Ω–∞ URL TEST: {url_with_params}")

    ############33

    try:
        response = requests.post(url_with_params, headers={'Content-Type': 'application/json'}, timeout=5) 
        response.raise_for_status()
        
        success_message = f"–ó–∞–ø—Ä–æ—Å –≤ Chat2Desk –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–°—Ç–∞—Ç—É—Å: {response.status_code}). –û—Ç–≤–µ—Ç: {response.text[:150]}"
        logger.info(f"Chat2Desk: –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: {success_message}")
        return True, success_message

    except requests.exceptions.HTTPError as e:
        error_msg = f"Chat2Desk HTTP –æ—à–∏–±–∫–∞: {e.response.status_code} - {e.response.text}"
    except requests.exceptions.RequestException as e:
        error_msg = f"Chat2Desk –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}"
    except Exception as e:
        error_msg = f"Chat2Desk –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
    
    st.error(error_msg)
    logger.error(error_msg)
    return False, error_msg

RENAME_MAP = {
    "resume_schema.link":                       "link",
    "resume_schema.address":                    "address",
    "resume_schema.mainParams.–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏":   "–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏",
    "resume_schema.mainParams.–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã":   "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã",
    "resume_schema.additionalParams.–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
    "resume_schema.additionalParams.–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã": "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã",
    "resume_schema.additionalParams.–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∞–≤": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∞–≤",
    "resume_schema.description":                "–û–ø–∏—Å–∞–Ω–∏–µ",
    "resume_schema.title":                      "–î–æ–ª–∂–Ω–æ—Å—Ç—å",
    "id":                                       "ID",
}

# –∫–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–ø–∏—Å–∫–æ–≤—ã–µ ‚Äî —Å–∫–ª–µ–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ '\n'
LIST_LIKE_COLS: List[str] = [
    "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
    "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã",
    "–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏",
]

def _scrape_single_aggregator(vacancy_details: dict, aggregator: str) -> pd.DataFrame | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç extra_df –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞ –ª–∏–±–æ None."""
    logger.info(f"–°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞.")
    search_params = build_search_params(vacancy_details, aggregator)
    if not search_params:
        return None

    logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ {aggregator}, search_params {search_params}")
    task_id = launch_pipeline(search_params, aggregator)
    if not task_id:
        return None

    logger.info(f"–ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ –¥–ª—è {aggregator}")
    task_info = track_task_progress(task_id)
    if not task_info or task_info.get("status") != "success":
        logger.info(f"–¢–∞—Å–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å –¥–ª—è {aggregator}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {task_info}")
        return None

    candidates = task_info.get("result", {}).get("candidates", [])
    if not candidates:
        logger.error(f"–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {aggregator}, {task_info["result"]["candidates"]}")
        logger.error(str(task_info)[:1000])
        return None
    
    logger.success(f"–ï—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {aggregator}")
    
    df = pd.json_normalize(candidates, sep='.')
    return df


def append_extra_resumes(df_cv: pd.DataFrame, vacancy_details: dict) -> pd.DataFrame:
    """
    –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–µ–∑—é–º–µ –Ω–∞ HH –∏ Avito, —Å–∫–ª–µ–π–∫–∞ –≤ –∏—Å—Ö–æ–¥–Ω—ã–π df_cv.
    """
    extra_frames: List[pd.DataFrame] = []
    aggregators = ("headhunter_api", "avito_api")

    logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥ hh –∏ avito")

    # --- 1. –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –¥–≤—É—Ö –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ --------------------------------
    with ThreadPoolExecutor(max_workers=len(aggregators)) as pool:
        futures = {
            pool.submit(_scrape_single_aggregator, vacancy_details, agg): agg
            for agg in aggregators
        }
        for fut in as_completed(futures):
            df = fut.result()
            if df is not None:
                extra_frames.append(df)

    # --- 2. –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–∞—à–ª–∏, –≥–æ—Ç–æ–≤–∏–º –∫ —Å–∫–ª–µ–π–∫–µ --------------------------------
    if not extra_frames:
        st.info("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return df_cv

    extra_all = pd.concat(extra_frames, ignore_index=True)

    # 2.1. –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Ä—Ç—É –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
    cols_to_rename = {old: new for old, new in RENAME_MAP.items() if old in extra_all.columns}
    extra_all = extra_all.rename(columns=cols_to_rename)

    # 2.2. —Å–ø–∏—Å–∫–∏ ‚Üí —Å—Ç—Ä–æ–∫–∞
    for col in LIST_LIKE_COLS:
        if col in extra_all.columns:
            extra_all[col] = extra_all[col].apply(
                lambda v: "\n".join(v) if isinstance(v, list) else v
            )

    # 2.3. –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∫–æ–ª–æ–Ω–æ–∫ –∏ –ø–æ—Ä—è–¥–æ–∫, –∫–∞–∫ –≤ df_cv
    for col in df_cv.columns:
        if col not in extra_all.columns:
            extra_all[col] = pd.NA
    extra_all = extra_all[df_cv.columns]

    # --- 3. —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Å–∫–ª–µ–π–∫–∞ ----------------------------------------------------
    df_cv = pd.concat([df_cv, extra_all], ignore_index=True)
    st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∑—é–º–µ: {len(extra_all)}")

    return df_cv

def process_candidate_for_huntflow(candidate_key, candidate_ml_data):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Huntflow.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (True, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ") –∏–ª–∏ (False, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ").
    """
    session_key_pii = f"pii_data_{candidate_key}"
    session_key_hf_id = f"hf_app_id_{candidate_key}"
    session_key_hf_processed = f"hf_processed_{candidate_key}"
    
    cand_display_name = candidate_ml_data.get("–î–æ–ª–∂–Ω–æ—Å—Ç—å", f"–ö–∞–Ω–¥–∏–¥–∞—Ç ID: {candidate_key}")
    
    try:
        pii_data_raw = None
        access_token_ext = None
        
        candidate_link = candidate_ml_data.get("link")
        source_type, resume_id_from_link = parse_resume_link(candidate_link)

        if not source_type or not resume_id_from_link:
            msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏—Å—Ç–æ—á–Ω–∏–∫/ID –∏–∑ —Å—Å—ã–ª–∫–∏: {candidate_link}"
            st.warning(msg); logger.error(f"–ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–∫–∏ –¥–ª—è {cand_display_name}: {candidate_link}")
            return False, msg

        logger.info(f"–î–ª—è {cand_display_name}: –∏—Å—Ç–æ—á–Ω–∏–∫='{source_type}', ID='{resume_id_from_link}'")

        if source_type == "hh":
            access_token_ext = get_hh_oauth_token()
            if access_token_ext: pii_data_raw = get_hh_contacts_api(resume_id_from_link, access_token_ext)
        elif source_type == "avito":
            access_token_ext = get_avito_oauth_token()
            if access_token_ext: pii_data_raw = get_avito_contacts_api(resume_id_from_link, access_token_ext)
        else:
            msg = f"–ò—Å—Ç–æ—á–Ω–∏–∫ '{source_type}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."
            st.warning(msg); logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ '{source_type}' –¥–ª—è {cand_display_name}")
            return False, msg
        
        if not access_token_ext: 
            msg = f"–ù–µ—Ç Access Token –¥–ª—è {source_type.upper()}."
            st.warning(msg); logger.error(f"–ù–µ—Ç Access Token {source_type.upper()} –¥–ª—è {cand_display_name}")
            return False, msg
        if not pii_data_raw: 
            msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ü–î –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏–∑ {source_type.upper()}."
            st.warning(msg); logger.error(f"–ù–µ—Ç –ü–î {source_type.upper()} –¥–ª—è {cand_display_name} (ID: {resume_id_from_link})")
            return False, msg
        
        pii_standardized = _extract_pii_details(pii_data_raw, source_type.upper())
        st.session_state[session_key_pii] = pii_standardized
        
        hf_app_id, err_create = create_huntflow_applicant_api(pii_standardized, candidate_ml_data, resume_id_from_link, source_type.upper())
        if err_create:
            msg = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ HF: {err_create}"
            st.warning(msg); logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {cand_display_name} –≤ HF: {err_create}")
            return False, msg

        st.session_state[session_key_hf_id] = hf_app_id
        
        current_hf_vacancy_id = st.session_state.get("selected_huntflow_vacancy_id")
        if current_hf_vacancy_id:
            cand_score = candidate_ml_data.get("sim_score_second", candidate_ml_data.get("–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª",0))
            cand_score_perc = 0
            if isinstance(cand_score, (float, int)) and not isinstance(cand_score, bool):
                cand_score_perc = round(cand_score * 100 if 0 < cand_score <= 1.0 else cand_score)
            
            ok_link, err_link = link_applicant_to_vacancy_api(hf_app_id, current_hf_vacancy_id, cand_score_perc)
            if err_link:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ {cand_display_name} –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ HF {current_hf_vacancy_id}: {err_link}")
            else:
                logger.info(f"{cand_display_name} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ HF {current_hf_vacancy_id}.")
        
        st.session_state[session_key_hf_processed] = True
        success_msg = f"–ö–∞–Ω–¥–∏–¥–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è Huntflow (ID: {hf_app_id})."
        logger.info(f"{cand_display_name}: {success_msg}")
        return True, success_msg

    except Exception as e:
        error_msg = f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–ª—è Huntflow: {e}"
        logger.error(f"{cand_display_name}: {error_msg}")
        return False, error_msg


def process_candidate_for_whatsapp(candidate_key, candidate_ml_data):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—É —á–µ—Ä–µ–∑ WhatsApp.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (True, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ") –∏–ª–∏ (False, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ").
    """
    session_key_pii = f"pii_data_{candidate_key}"
    session_key_hf_id = f"hf_app_id_{candidate_key}"
    session_key_wa_sent = f"wa_sent_{candidate_key}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not st.session_state.get(session_key_hf_id) or not st.session_state.get(session_key_pii):
        msg = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ WhatsApp (—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ Huntflow)."
        st.warning(msg)
        return False, msg

    pii_for_whatsapp = st.session_state.get(session_key_pii)
    phone = pii_for_whatsapp.get("phone")
    if not phone:
        msg = "–ù–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞."
        st.warning(msg)
        logger.error(f"Chat2Desk: –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate_key}")
        return False, msg

    try:
        applicant_id_for_whatsapp = st.session_state.get(session_key_hf_id)
        name_client = f"{pii_for_whatsapp.get('first_name', '')} {pii_for_whatsapp.get('last_name', '')}".strip()
        hf_account_id_for_c2d = st.secrets.get("HUNTFLOW_ACCOUNT_ID", "2")
        current_hf_vacancy_id_for_c2d = st.session_state.get("selected_huntflow_vacancy_id")
        
        vacancy_name_for_c2d = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        if current_hf_vacancy_id_for_c2d and st.session_state.get('huntflow_vacancies_details'):
            selected_vac_details = st.session_state['huntflow_vacancies_details'].get(current_hf_vacancy_id_for_c2d)
            if selected_vac_details:
                vacancy_name_for_c2d = selected_vac_details.get("position", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        
        success_c2d, msg_c2d = send_to_chat2desk_api(
            phone_number=phone,
            client_name=name_client,
            hf_account_id=hf_account_id_for_c2d,
            hf_vacancy_id=current_hf_vacancy_id_for_c2d,
            hf_applicant_id=applicant_id_for_whatsapp,
            vacancy_name_original=vacancy_name_for_c2d
        )
        
        if success_c2d:
            st.session_state[session_key_wa_sent] = True
            logger.info(f"Chat2Desk: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {name_client} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. {msg_c2d}")
            return True, msg_c2d
        else:
            st.warning(f"Chat2Desk: {msg_c2d}")
            logger.error(f"Chat2Desk: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {name_client}. {msg_c2d}")
            return False, msg_c2d

    except Exception as e:
        error_msg = f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ WhatsApp: {e}"
        logger.error(f"–ö–∞–Ω–¥–∏–¥–∞—Ç {candidate_key}: {error_msg}")
        return False, error_msg

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π Huntflow –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–ª–∏ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
if not st.session_state.huntflow_vacancies_list:
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ Huntflow..."):
        st.session_state.huntflow_vacancies_list, st.session_state.huntflow_vacancies_details = fetch_huntflow_vacancies()

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ UI ---
common_ui.display_sidebar(config, update_address_weight_callback)

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤–≤–æ–¥–∞ (–ê–°–ü–ü –∏–ª–∏ –ü—Ä–æ—Ñ) ---
vacancy_input_data = None
if current_mode == Mode.MASS:
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ (–ê–°–ü–ü)")
    vacancy_input_data = mass_ui.display_mass_input_form() 
elif current_mode == Mode.PROF:
    st.header("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    vacancy_input_data = prof_ui.display_prof_input_form()

scrape_extra_resumes = st.checkbox(
    "–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫ –¥–æ–ø. —Ä–µ–∑—é–º–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (–æ–∫–æ–ª–æ 10 –º–∏–Ω—É—Ç)",
    key="scrape_extra_resumes_flag"
)

if st.button("–ü–æ–¥–æ–±—Ä–∞—Ç—å", type="primary"):
    if not vacancy_input_data:
        st.warning("–î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç —Ñ–æ—Ä–º—ã –≤–≤–æ–¥–∞.")
    
    if not vacancy_input_data:
        st.warning("–†–µ–∂–∏–º –ø–æ–¥–±–æ—Ä–∞ –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.")
    elif (
        vacancy_input_data.get("–î–æ–ª–∂–Ω–æ—Å—Ç—å")
        and vacancy_input_data.get("required")
        and vacancy_input_data.get("location")
    ):
        st.session_state["computed"] = False
        
        selected_date_threshold = st.session_state.selected_date_threshold
        threshold_from_slider = st.session_state.current_threshold 
        distance_option_val = st.session_state.distance_option
        is_vahta_val = st.session_state.vahta_mode
        
        if current_mode == Mode.PROF:
            st.info("–õ–æ–≥–∏–∫–∞ –ø—Ä–æ—Ñ. –ø–æ–¥–±–æ—Ä–∞ –µ—â–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
            st.stop() 
        else: # Mode.MASS
            df_cv_path = Path(config.get("data", {}).get("cv_path_mass", "data/processed/mass/candidates_hh.csv"))
            df_cv = load_data(str(df_cv_path))
            if df_cv.empty:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ {df_cv_path}.")
                st.stop()

            with st.status("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏..."):
                vacancy_processed = selector.preprocess_vacancy(deepcopy(vacancy_input_data)) 

            logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞–∫–∞–Ω—Å–∏–∏:\n{vacancy_processed}")

            if scrape_extra_resumes:
                with st.spinner("–ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—é–º–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (–¥–æ 10 –º–∏–Ω—É—Ç)‚Ä¶"):
                    # vacancy_input_data —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã;
                    # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ st.session_state.selected_huntflow_vacancy_details
                    df_cv = append_extra_resumes(df_cv, vacancy_processed)
                
            if "address" in df_cv.columns: # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                 df_cv = df_cv.rename(columns={"address": "–ê–¥—Ä–µ—Å"})
        
        with st.status("–ü–æ–¥–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤..."):
            use_cache = not (not Path("./tmp_cvs.csv").exists() or config["general"]["mode"] == "prod")
            
            if not use_cache:
                st.write(f"–ü–µ—Ä–≤–∞—è —Ñ–∞–∑–∞: –∞–Ω–∞–ª–∏–∑ {df_cv.shape[0]} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
                max_distance_filter = None
                if distance_option_val != "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π":
                    max_distance_filter = float(distance_option_val)

                current_first_stage_weights = deepcopy(config["model"]["stage_1"]["weights"]) 
                if is_vahta_val:
                    if len(current_first_stage_weights) > 1: 
                        current_first_stage_weights[1] = 0.0
                    else:
                        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω—É–ª–∏—Ç—å –≤–µ—Å '–ê–¥—Ä–µ—Å' –¥–ª—è 1-–≥–æ —ç—Ç–∞–ø–∞.")

                df_ranked_1st = selector.rank_first_stage(
                    vacancy=vacancy_processed, 
                    df_relevant=df_cv.copy(),
                    date_threshold=selected_date_threshold, 
                    is_vahta=is_vahta_val, 
                    max_distance_filter=max_distance_filter,
                    first_stage_weights=np.array(current_first_stage_weights),
                )
                st.write(f"–í—Ç–æ—Ä–∞—è —Ñ–∞–∑–∞: –∞–Ω–∞–ª–∏–∑ {df_ranked_1st.shape[0]} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤..")

                df_ranked_2nd, vacancy_prep_for_display, nan_mask_for_display = selector.rank_second_stage(
                    vacancy=vacancy_processed,
                    df_relevant=df_ranked_1st.copy(),
                    df_weights=st.session_state["df_weights"], 
                    score_threshold_stage_2=threshold_from_slider,
                    top_n_second_stage = st.session_state.kols_candidates
                )
                if config["general"]["mode"] != "prod":
                    df_ranked_2nd.to_csv("./tmp_cvs.csv", index=False)
                    with open("./tmp_vac.json", "w", encoding='utf-8') as f:
                        json.dump(vacancy_prep_for_display, f, ensure_ascii=False)
                    np.save("./tmp_mask.npy", nan_mask_for_display)
            else:
                st.write("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –∫—ç—à–∞...")
                df_ranked_2nd = pd.read_csv("./tmp_cvs.csv")
                with open("./tmp_vac.json", "r", encoding='utf-8') as f:
                    vacancy_prep_for_display = json.load(f)
                nan_mask_for_display = np.load("./tmp_mask.npy")

            st.session_state.data_cv_dict = df2dict(df_ranked_2nd) 
            st.session_state.vacancy_prep_for_display = vacancy_prep_for_display
            st.session_state.nan_mask_for_display = nan_mask_for_display
            st.session_state["computed"] = True
            st.write(f"–í—ã–±—Ä–∞–Ω–æ {df_ranked_2nd.shape[0]} –ª—É—á—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
            st.rerun() # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏–∂–µ –∫–Ω–æ–ø–∫–∏
            
    else:
        st.error(
            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è', '–õ–æ–∫–∞—Ü–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã'",
            icon="üö®",
        )
if st.session_state.get("computed", False):
    data_cv_to_display = st.session_state.get("data_cv_dict", {})
    vacancy_prep_to_display = st.session_state.get("vacancy_prep_for_display", {})
    nan_mask_to_display = st.session_state.get("nan_mask_for_display", np.array([]))

    if not data_cv_to_display:
        st.info("–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    else:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ (–∫–∞–∫ –∏ –±—ã–ª–æ)
        if current_mode == Mode.MASS:
            if "model" in config and "stage_2" in config["model"] and "ranking_features" in config["model"]["stage_2"]:
                 mass_ui.display_mass_results(data_cv_to_display, vacancy_prep_to_display, config, nan_mask_to_display)
            else:
                st.error("–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        elif current_mode == Mode.PROF:
            prof_ui.display_prof_results(data_cv_to_display, vacancy_prep_to_display, config, nan_mask_to_display)
        
        st.markdown("---") 
        st.subheader("–ì—Ä—É–ø–ø–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏")
        
        # --- –ù–û–í–´–ï –ì–†–£–ü–ü–û–í–´–ï –ö–ù–û–ü–ö–ò ---
        cols_actions = st.columns(2)
        with cols_actions[0]:
            hf_mass_button = st.button("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤ Huntflow", use_container_width=True)
        with cols_actions[1]:
            wa_mass_button = st.button("üîµ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤ Whatsapp", use_container_width=True)
        
        st.markdown("<hr style='margin-top:0.5rem; margin-bottom:0.5rem;'/>", unsafe_allow_html=True)
        
        # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        selected_candidates_keys = []

        # --- –°–ü–ò–°–û–ö –ö–ê–ù–î–ò–î–ê–¢–û–í –° –ß–ï–ö–ë–û–ö–°–ê–ú–ò ---
        for candidate_key, candidate_ml_data in data_cv_to_display.items():
            if not isinstance(candidate_ml_data, dict):
                logger.warning(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate_key} –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º, –ø—Ä–æ–ø—É—Å–∫.")
                continue

            # –ö–ª—é—á–∏ –¥–ª—è session_state (—Å—Ç–∞—Ç—É—Å—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏)
            session_key_hf_processed = f"hf_processed_{candidate_key}"
            session_key_wa_sent = f"wa_sent_{candidate_key}"
            
            cols_info = st.columns([1, 10]) # –ö–æ–ª–æ–Ω–∫–∞ –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞ –∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            
            with cols_info[0]:
                # –ß–µ–∫–±–æ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞. –û—Ç–∫–ª—é—á–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ HF.
                is_processed_in_hf = st.session_state.get(session_key_hf_processed, False)
                if st.checkbox("", key=f"select_{candidate_key}", value=False, help="–í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"):
                    selected_candidates_keys.append(candidate_key)

            with cols_info[1]:
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                cand_display_name = candidate_ml_data.get("–î–æ–ª–∂–Ω–æ—Å—Ç—å", f"–ö–∞–Ω–¥–∏–¥–∞—Ç ID: {candidate_key}")
                
                cand_score = candidate_ml_data.get("sim_score_second", candidate_ml_data.get("–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª",0))
                cand_score_perc = "N/A"
                if isinstance(cand_score, (float, int)) and not isinstance(cand_score, bool):
                    cand_score_perc = round(cand_score * 100 if 0 < cand_score <= 1.0 else cand_score)
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
                status_icons = []
                if st.session_state.get(session_key_hf_processed, False):
                    status_icons.append("‚úÖ")
                if st.session_state.get(session_key_wa_sent, False):
                    status_icons.append("üîµ")
                
                st.markdown(f"{' '.join(status_icons)} {cand_display_name} (–°–∫–æ—Ä–∏–Ω–≥: {cand_score_perc}%)")
            
            st.markdown("<hr style='margin-top:0.1rem; margin-bottom:0.1rem; border-top: 1px dashed #222;'/>", unsafe_allow_html=True)

        # --- –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ì–†–£–ü–ü–û–í–´–• –î–ï–ô–°–¢–í–ò–ô ---

        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–í Huntflow"
        if hf_mass_button:
            if not selected_candidates_keys:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é –≥–∞–ª–æ—á–∫–∏.")
            else:
                processed_count = 0
                with st.status(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(selected_candidates_keys)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è Huntflow...", expanded=True) as status:
                    for key in selected_candidates_keys:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
                        if st.session_state.get(f"hf_processed_{key}", False):
                            st.write(f"‚ÑπÔ∏è –ö–∞–Ω–¥–∏–¥–∞—Ç {key} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ, –ø—Ä–æ–ø—É—Å–∫.")
                            continue

                        st.write(f"‚ñ∂Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {key}...")
                        success, message = process_candidate_for_huntflow(key, data_cv_to_display[key])
                        if success:
                            st.write(f"‚úîÔ∏è {message}")
                            processed_count += 1
                        else:
                            st.write(f"‚ùå {message}")
                    
                    status.update(label=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Huntflow –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: {processed_count} –∏–∑ {len(selected_candidates_keys)}.", state="complete")
                st.rerun() # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å UI (–∏–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤)

        # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–í Whatsapp"
        if wa_mass_button:
            if not selected_candidates_keys:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –ø–æ–º–æ—â—å—é –≥–∞–ª–æ—á–∫–∏.")
            else:
                sent_count = 0
                with st.status(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π {len(selected_candidates_keys)} –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º...", expanded=True) as status:
                    for key in selected_candidates_keys:
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Ö, –∫–æ–º—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏
                        if st.session_state.get(f"wa_sent_{key}", False):
                            st.write(f"‚ÑπÔ∏è –ö–∞–Ω–¥–∏–¥–∞—Ç—É {key} —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫.")
                            continue

                        st.write(f"‚ñ∂Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç—É {key}...")
                        success, message = process_candidate_for_whatsapp(key, data_cv_to_display[key])
                        if success:
                            st.write(f"‚úîÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û—Ç–≤–µ—Ç API: {message}")
                            sent_count += 1
                        else:
                            st.write(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {message}")

                    status.update(label=f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Whatsapp –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: {sent_count} –∏–∑ {len(selected_candidates_keys)}.", state="complete")
                st.markdown("<hr style='margin-top:0.5rem; margin-bottom:0.5rem;'/>", unsafe_allow_html=True) # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –º–µ–∂–¥—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏