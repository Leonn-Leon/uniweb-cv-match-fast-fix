# app.py
import json
from pathlib import Path
import numpy as np
import pandas as pd
import streamlit as st
from copy import deepcopy
from loguru import logger
import datetime 
import requests
import re
import time

# –ò–º–ø–æ—Ä—Ç –≤–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from src.utils.utils import Mode, load_data, load_model, df2dict
from src.ui import common_ui, mass_ui, prof_ui # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∏ –º–æ–¥—É–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Session State ---
if "computed" not in st.session_state:
    st.session_state["computed"] = False
if "vahta_mode" not in st.session_state:
    st.session_state["vahta_mode"] = False
if "distance_option" not in st.session_state:
    st.session_state["distance_option"] = "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
if "original_address_weight" not in st.session_state: 
    st.session_state.original_address_weight = None

# –ù–æ–≤—ã–µ –∫–ª—é—á–∏ –¥–ª—è session_state
if "huntflow_vacancies_list" not in st.session_state: # –°–ø–∏—Å–æ–∫ –¥–ª—è selectbox (–æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ_–∏–º—è, id)
    st.session_state.huntflow_vacancies_list = [] 
if "huntflow_vacancies_details" not in st.session_state: # –°–ª–æ–≤–∞—Ä—å {vacancy_id: –ø–æ–ª–Ω—ã–µ_–¥–µ—Ç–∞–ª–∏_–≤–∞–∫–∞–Ω—Å–∏–∏}
    st.session_state.huntflow_vacancies_details = {} 
if "selected_huntflow_vacancy_id" not in st.session_state: # ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ Huntflow
    st.session_state.selected_huntflow_vacancy_id = None

# –ö–ª—é—á–∏ –¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ mass_ui.py –∏—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç)
if "vacancy_form_title" not in st.session_state:
    st.session_state.vacancy_form_title = ""
if "vacancy_form_required" not in st.session_state:
    st.session_state.vacancy_form_required = ""
if "vacancy_form_location" not in st.session_state:
    st.session_state.vacancy_form_location = ""
if "vacancy_form_optional" not in st.session_state:
    st.session_state.vacancy_form_optional = ""
# --- –ö–æ–Ω–µ—Ü –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Session State ---

st.title("–ü–æ–¥–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ üíº")

current_mode = Mode.MASS # –ü–æ–∫–∞ –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π –ø–æ–¥–±–æ—Ä

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ ---
if current_mode == Mode.PROF:
    selector, config = load_model(config_path="./config/config.yaml")
else: # Mode.MASS
    selector, config = load_model(config_path="./config/config_mass.yaml")

if not selector or not config:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –†–∞–±–æ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    st.stop()

if 'current_threshold' not in st.session_state: # –ü–æ—Ä–æ–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    st.session_state['current_threshold'] = config["model"]["stage_2"]["score_threshold"]


# --- Callback –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞ "–í–∞—Ö—Ç–∞" ---
def update_address_weight_callback():
    try:
        df = st.session_state["df_weights"]
        is_vahta = st.session_state["vahta_mode"]
        address_index_list = df.index[df['–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞'] == '–ê–¥—Ä–µ—Å'].tolist()
        if not address_index_list: return
        address_index = address_index_list[0]
        current_weight = df.loc[address_index, '–í–µ—Å']
        if is_vahta:
            if current_weight != 0.0:
                st.session_state.original_address_weight = current_weight
                df.loc[address_index, '–í–µ—Å'] = 0.0
                st.toast("–í–µ—Å '–ê–¥—Ä–µ—Å' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 0 (–í–∞—Ö—Ç–∞).", icon="‚ö†Ô∏è")
        else:
            if st.session_state.original_address_weight is not None:
                if current_weight == 0.0: 
                    df.loc[address_index, '–í–µ—Å'] = st.session_state.original_address_weight
                    st.toast(f"–í–µ—Å '–ê–¥—Ä–µ—Å' –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {st.session_state.original_address_weight}", icon="üëç")
        st.session_state["df_weights"] = df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Å–∞ '–ê–¥—Ä–µ—Å': {e}")

HUNTFLOW_BASE_URL = "https://rusal-api-mirror.huntflow.ru/v2" 

def get_huntflow_proxies():
    proxy_user = st.secrets.get("HUNTFLOW_PROXY_USER")
    proxy_pass = st.secrets.get("HUNTFLOW_PROXY_PASS")
    proxy_host = st.secrets.get("HUNTFLOW_PROXY_HOST")
    proxy_port = st.secrets.get("HUNTFLOW_PROXY_PORT")

    if all([proxy_user, proxy_pass, proxy_host, proxy_port]):
        proxy_url = f"http://{proxy_user}:{proxy_pass}@{proxy_host}:{proxy_port}"
        return {
            "http": proxy_url,
            "https": proxy_url,
        }
    return None

def fetch_huntflow_vacancies_api():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ Huntflow."""
    proxies = get_huntflow_proxies()
    try:
        hf_token = st.secrets.get("HUNTFLOW_API_TOKEN")
        hf_account_id = st.secrets.get("HUNTFLOW_ACCOUNT_ID", "2")
        if not hf_token:
            st.error("–¢–æ–∫–µ–Ω API Huntflow –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .streamlit/secrets.toml")
            return [], {}
        headers = {"Authorization": f"Bearer {hf_token}"}
        url = f"{HUNTFLOW_BASE_URL}/accounts/{hf_account_id}/vacancies"
        params = {"status": "OPEN", "count": 100} 
        # response = requests.get(url, headers=headers, params=params)
        response = requests.get(url, headers=headers, params=params, proxies=proxies)
        response.raise_for_status()
        vacancies_data = response.json().get("items", [])
        vac_list_selectbox = [(vac.get("position", f"–í–∞–∫–∞–Ω—Å–∏—è ID {vac.get('id')}"), vac.get("id")) for vac in vacancies_data if vac.get("id")]
        vac_details_map = {vac.get("id"): vac for vac in vacancies_data if vac.get("id")}
        return vac_list_selectbox, vac_details_map
    except requests.exceptions.ProxyError as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Huntflow: {e}")
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ Huntflow: {e}")
    except Exception as e:
        st.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ (–≤–∞–∫–∞–Ω—Å–∏–∏ Huntflow): {e}")
    return [], {}

def get_hh_contacts_api(resume_id, access_token_ext=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å HH.ru."""
    try:
        hh_token = access_token_ext
        if not hh_token: st.error("–¢–æ–∫–µ–Ω HH.ru API –Ω–µ –Ω–∞–π–¥–µ–Ω."); return None
        headers = {"Authorization": f"Bearer {hh_token}", "User-Agent": "Uniweb CV Match App"}
        resume_url = f"https://api.hh.ru/resumes/{resume_id}"
        r_resume = requests.get(resume_url, headers=headers)
        # logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:"+ str(r_resume.json()))
        r_resume.raise_for_status()
        r_contacts = r_resume.json().get("contact")
        if not r_contacts:
            contacts_href = r_resume.json().get("actions").get('get_with_contact').get("url")
            if not contacts_href:
                st.warning(f"–ù–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ã HH {resume_id}."); return None
            r_contacts = requests.get(contacts_href, headers=headers)
            r_contacts.raise_for_status()
            r_contacts = r_contacts.json().get("contact")
        details = {"first_name": r_resume.json().get("first_name", ""), "last_name": r_resume.json().get("last_name", ""),
                   "middle_name": r_resume.json().get("middle_name", ""), "phone": "", "email": ""}
        if r_contacts[0].get("type").get("id") == "email":
            details["email"] = r_contacts[0].get("value", "")
            details["phone"] = r_contacts[1].get("value", "").get("formatted")
        elif r_contacts[0].get("type").get("id") == "cell":
            details["phone"] = r_contacts[0].get("value").get("formatted")
            details["email"] = r_contacts[1].get("value")
        return details
    except requests.exceptions.RequestException as e: st.error(f"–û—à–∏–±–∫–∞ API HH.ru ({resume_id}): {e}"); return None
    except Exception as e: st.error(f"–û—à–∏–±–∫–∞ (HH contacts {resume_id}): {e}"); return None

def get_avito_contacts_api(resume_id, access_token_ext=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å Avito."""
    try:
        avito_token = access_token_ext
        if not avito_token: st.error("–¢–æ–∫–µ–Ω Avito API –Ω–µ –Ω–∞–π–¥–µ–Ω."); return None
        headers = {"Authorization": f"Bearer {avito_token}", "Accept": "application/json", "User-Agent": "Uniweb CV Match App"}
        url = f"https://api.avito.ru/job/v1/resumes/{resume_id}/contacts/"
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        logger.debug(response.json())
        FIO = response.json().get("full_name")
        details = {"first_name": FIO.get("first_name", ""), "last_name": FIO.get("last_name", ""),
                   "middle_name": FIO.get("patronymic", ""), "phone": "", "email": ""}
        r_contacts = response.json().get("contacts")
        if r_contacts[0].get("type") == "e-mail":
            details["email"] = r_contacts[0].get("value", "")
            details["phone"] = r_contacts[1].get("value", "")
        elif r_contacts[0].get("type") == "phone":
            details["phone"] = r_contacts[0].get("value")
            details["email"] = r_contacts[1].get("value")
        return details
    except requests.exceptions.RequestException as e: st.error(f"–û—à–∏–±–∫–∞ API Avito ({resume_id}): {e}"); return None
    except Exception as e: st.error(f"–û—à–∏–±–∫–∞ (Avito contacts {resume_id}): {e}"); return None

def _extract_pii_details(pii_data, source):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ PII –∏–∑ –æ—Ç–≤–µ—Ç–∞ HH/Avito."""
    details = {"first_name": "–ù–µ–∏–∑–≤.", "last_name": "–ù–µ–∏–∑–≤.", "middle_name": "", "phone": "", "email": ""}
    if not pii_data: return details

    details["first_name"] = pii_data.get("first_name", "–ù–µ–∏–∑–≤.")
    details["last_name"] = pii_data.get("last_name", "–ù–µ–∏–∑–≤.")
    details["middle_name"] = pii_data.get("middle_name", "")
    details["phone"] = pii_data.get("phone", "")
    details["email"] = pii_data.get("email", "")
    return details


def create_huntflow_applicant_api(pii_standardized, candidate_ml_data, source_resume_id, source_type_for_hf):
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ Huntflow (—à–∞–≥ 1)."""
    proxies = get_huntflow_proxies()
    try:
        hf_token = st.secrets.get("HUNTFLOW_API_TOKEN")
        hf_account_id = st.secrets.get("HUNTFLOW_ACCOUNT_ID", "2")
        if not hf_token: return None, "–¢–æ–∫–µ–Ω Huntflow API –Ω–µ –Ω–∞–π–¥–µ–Ω."
        headers = {"Authorization": f"Bearer {hf_token}", "Content-Type": "application/json"}
        url = f"{HUNTFLOW_BASE_URL}/accounts/{hf_account_id}/applicants"
        body = {
            "last_name": pii_standardized["last_name"], "first_name": pii_standardized["first_name"],
            "middle_name": pii_standardized["middle_name"], "phone": pii_standardized["phone"],
            "email": pii_standardized["email"],
            "position": candidate_ml_data.get("–î–æ–ª–∂–Ω–æ—Å—Ç—å", candidate_ml_data.get("–ñ–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å", "")),
            "money": str(candidate_ml_data.get("–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç", "")),
            "externals": [{"auth_type": "NATIVE", "id": source_resume_id, 
                           "data": {"body": f"–ö–∞–Ω–¥–∏–¥–∞—Ç –∏–∑ {source_type_for_hf}. –°–∫–æ—Ä–∏–Ω–≥: {candidate_ml_data.get('–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–ª', 'N/A')}%"} }]
        }
        response = requests.post(url, headers=headers, json=body, proxies=proxies)
        response.raise_for_status()
        return response.json().get("id"), None
    except requests.exceptions.RequestException as e: return None, f"API HF (—Å–æ–∑–¥–∞–Ω–∏–µ): {e.response.text if e.response else e}"
    except Exception as e: return None, f"–û—à–∏–±–∫–∞ HF (—Å–æ–∑–¥–∞–Ω–∏–µ): {e}"

def fill_huntflow_questionary_api(hf_applicant_id, candidate_ml_data):
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∫–µ—Ç—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ Huntflow (—à–∞–≥ 2, —É–ø—Ä–æ—â–µ–Ω–Ω–æ)."""
    try:
        hf_token = st.secrets.get("HUNTFLOW_API_TOKEN")
        hf_account_id = st.secrets.get("HUNTFLOW_ACCOUNT_ID", "2")
        if not hf_token: return False, "–¢–æ–∫–µ–Ω Huntflow API –Ω–µ –Ω–∞–π–¥–µ–Ω."
        headers = {"Authorization": f"Bearer {hf_token}", "Content-Type": "application/json"}
        url = f"{HUNTFLOW_BASE_URL}/accounts/{hf_account_id}/applicants/{hf_applicant_id}/questionary"
        body = { # –£–ø—Ä–æ—â–µ–Ω–æ - –Ω—É–∂–Ω—ã ID –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –º–Ω–æ–≥–∏—Ö –ø–æ–ª–µ–π
            "experience": int(candidate_ml_data.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–ª–µ—Ç)", 0)) if candidate_ml_data.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–ª–µ—Ç)") else None,
            "experience_description": candidate_ml_data.get("–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", "") # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        }
        body_filtered = {k: v for k, v in body.items() if v is not None}
        if not body_filtered: return True, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∫–µ—Ç—ã."
        response = requests.post(url, headers=headers, json=body_filtered)
        response.raise_for_status()
        return True, None
    except requests.exceptions.RequestException as e: return False, f"API HF (–∞–Ω–∫–µ—Ç–∞): {e.response.text if e.response else e}"
    except Exception as e: return False, f"–û—à–∏–±–∫–∞ HF (–∞–Ω–∫–µ—Ç–∞): {e}"

def link_applicant_to_vacancy_api(hf_applicant_id, hf_vacancy_id, score_percentage):
    """–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ Huntflow."""
    try:
        hf_token = st.secrets.get("HUNTFLOW_API_TOKEN")
        hf_account_id = st.secrets.get("HUNTFLOW_ACCOUNT_ID", "2")
        if not hf_token: return False, "–¢–æ–∫–µ–Ω Huntflow API –Ω–µ –Ω–∞–π–¥–µ–Ω."
        if not hf_vacancy_id: return True, "ID –≤–∞–∫–∞–Ω—Å–∏–∏ HF –Ω–µ —É–∫–∞–∑–∞–Ω."
        headers = {"Authorization": f"Bearer {hf_token}", "Content-Type": "application/json"}
        url = f"{HUNTFLOW_BASE_URL}/accounts/{hf_account_id}/applicants/{hf_applicant_id}/vacancy"
        body = {
            "vacancy": hf_vacancy_id, "status": 21, # –°—Ç–∞—Ç—É—Å –∏–∑ –¢–ó
            "comment": f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–∫–æ—Ä–∏–Ω–≥–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç: {score_percentage}%"
        }
        response = requests.post(url, headers=headers, json=body)
        response.raise_for_status()
        return True, None
    except requests.exceptions.RequestException as e: return False, f"API HF (–ø—Ä–∏–≤—è–∑–∫–∞): {e.response.text if e.response else e}"
    except Exception as e: return False, f"–û—à–∏–±–∫–∞ HF (–ø—Ä–∏–≤—è–∑–∫–∞): {e}"

def parse_resume_link(link_url):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ ('hh' –∏–ª–∏ 'avito') –∏ ID —Ä–µ–∑—é–º–µ –∏–∑ URL.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (source, resume_id) –∏–ª–∏ (None, None) –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏.
    """
    if not link_url or not isinstance(link_url, str):
        logger.warning(f"–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link_url}")
        return None, None

    hh_match = re.search(r"hh\.ru/resume/([a-f0-9]{32,})", link_url, re.IGNORECASE) # HH ID –æ–±—ã—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π hex
    if hh_match:
        return "hh", hh_match.group(1)
    
    avito_match = re.search(r"avito\.ru/job/v1/resumes/(\d+)/contacts/?", link_url, re.IGNORECASE)
    if avito_match:
        return "avito", avito_match.group(1)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏ (–º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–µ)
    if "hh.ru" in link_url:
        # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å ID –∏–∑ –±–æ–ª–µ–µ –æ–±—â–∏—Ö —Å—Å—ã–ª–æ–∫ HH, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        hh_generic_match = re.search(r"hh\.ru/.*\?resume=([a-f0-9]+)", link_url, re.IGNORECASE)
        if hh_generic_match:
            return "hh", hh_generic_match.group(1)
        logger.warning(f"–°—Å—ã–ª–∫–∞ HH.ru –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID: {link_url}")
        return "hh", None # –ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–≤–µ—Å—Ç–µ–Ω, ID –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω
        
    if "avito.ru" in link_url:
         # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å ID –∏–∑ –±–æ–ª–µ–µ –æ–±—â–∏—Ö —Å—Å—ã–ª–æ–∫ Avito
        avito_generic_match = re.search(r"avito\.ru/(?:.+/)?(?:rezume(?:/.+)?_|\w+/|items/)(\d+)", link_url, re.IGNORECASE)
        if avito_generic_match:
            return "avito", avito_generic_match.group(1)
        logger.warning(f"–°—Å—ã–ª–∫–∞ Avito –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID: {link_url}")
        return "avito", None # –ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–≤–µ—Å—Ç–µ–Ω, ID –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω

    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ ID –∏–∑ —Å—Å—ã–ª–∫–∏: {link_url}")
    return None, None

HH_ACCESS_TOKEN_KEY = "hh_access_token_val" # –ò–∑–º–µ–Ω–∏–ª –∏–º—è –∫–ª—é—á–∞, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏
HH_TOKEN_EXPIRES_AT_KEY = "hh_token_expires_at_val"

def get_hh_oauth_token():
    access_token = st.session_state.get(HH_ACCESS_TOKEN_KEY)
    expires_at = st.session_state.get(HH_TOKEN_EXPIRES_AT_KEY)

    if access_token and expires_at and time.time() < expires_at:
        logger.debug("HH: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω.")
        return access_token

    logger.info("HH: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ access token...")
    token_url = st.secrets.get("HH_TOKEN_URL")
    client_id = st.secrets.get("HH_CLIENT_ID")
    client_secret = st.secrets.get("HH_CLIENT_SECRET")

    if not all([token_url, client_id, client_secret]):
        st.error("HH.ru: CLIENT_ID, CLIENT_SECRET –∏–ª–∏ TOKEN_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö.")
        logger.error("HH.ru: CLIENT_ID, CLIENT_SECRET –∏–ª–∏ TOKEN_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö.")
        return None

    payload = {
        'grant_type': 'client_credentials', # –≠—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è client_credentials
        'client_id': client_id,       # HH –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å client_id/secret –≤ —Ç–µ–ª–µ
        'client_secret': client_secret  # –∏–ª–∏ —á–µ—Ä–µ–∑ Basic Auth. –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é!
    }
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded'
    }

    try:
        response = requests.post(token_url, data=payload, headers=headers)
        response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏
        token_data = response.json()
        
        new_access_token = token_data.get('access_token')
        expires_in = token_data.get('expires_in', 86400) # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –ø–æ –¥–µ—Ñ–æ–ª—Ç—É —Å—É—Ç–∫–∏ (86400 —Å–µ–∫)

        if new_access_token and isinstance(expires_in, int):
            st.session_state[HH_ACCESS_TOKEN_KEY] = new_access_token
            st.session_state[HH_TOKEN_EXPIRES_AT_KEY] = time.time() + expires_in - 60 # –ë—É—Ñ–µ—Ä 60 —Å–µ–∫
            st.success("HH.ru: Access token —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.")
            logger.info("HH.ru: Access token —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.")
            return new_access_token
        else:
            st.error(f"HH.ru: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å 'access_token' –∏–ª–∏ 'expires_in' –∏–∑ –æ—Ç–≤–µ—Ç–∞. –û—Ç–≤–µ—Ç: {token_data}")
            logger.error(f"HH.ru: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å 'access_token' –∏–ª–∏ 'expires_in' –∏–∑ –æ—Ç–≤–µ—Ç–∞. –û—Ç–≤–µ—Ç: {token_data}")
            return None
    except requests.exceptions.RequestException as e:
        st.error(f"HH.ru: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        logger.error(f"HH.ru: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        if hasattr(e, 'response') and e.response is not None:
            try:
                st.json(e.response.json())
                logger.error(f"HH.ru: –¢–µ–ª–æ –æ—à–∏–±–∫–∏: {e.response.json()}")
            except ValueError:
                st.text(e.response.text)
                logger.error(f"HH.ru: –¢–µ–ª–æ –æ—à–∏–±–∫–∏ (–Ω–µ JSON): {e.response.text}")
        return None

AVITO_ACCESS_TOKEN_KEY = "avito_access_token_val"
AVITO_TOKEN_EXPIRES_AT_KEY = "avito_token_expires_at_val"

def get_avito_oauth_token():
    access_token = st.session_state.get(AVITO_ACCESS_TOKEN_KEY)
    expires_at = st.session_state.get(AVITO_TOKEN_EXPIRES_AT_KEY)

    if access_token and expires_at and time.time() < expires_at:
        logger.debug("Avito: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω.")
        return access_token

    logger.info("Avito: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ access token...")
    token_url = st.secrets.get("AVITO_TOKEN_URL") # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å "https://api.avito.ru/token/"
    client_id = st.secrets.get("AVITO_CLIENT_ID")
    client_secret = st.secrets.get("AVITO_CLIENT_SECRET")

    if not all([token_url, client_id, client_secret]):
        st.error("Avito: CLIENT_ID, CLIENT_SECRET –∏–ª–∏ TOKEN_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö.")
        logger.error("Avito: CLIENT_ID, CLIENT_SECRET –∏–ª–∏ TOKEN_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö.")
        return None

    payload = {
        'grant_type': 'client_credentials',
        'client_id': client_id,
        'client_secret': client_secret
    }
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded'
    }

    try:
        response = requests.post(token_url, data=payload, headers=headers)
        response.raise_for_status()
        token_data = response.json()

        new_access_token = token_data.get('access_token')
        expires_in = token_data.get('expires_in', 86400) # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –ø–æ –¥–µ—Ñ–æ–ª—Ç—É —Å—É—Ç–∫–∏ (86400 —Å–µ–∫)

        if new_access_token and isinstance(expires_in, int):
            st.session_state[AVITO_ACCESS_TOKEN_KEY] = new_access_token
            st.session_state[AVITO_TOKEN_EXPIRES_AT_KEY] = time.time() + expires_in - 60 # –ë—É—Ñ–µ—Ä
            st.success("Avito: Access token —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.")
            logger.info("Avito: Access token —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.")
            return new_access_token
        else:
            st.error(f"Avito: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å 'access_token' –∏–ª–∏ 'expires_in' –∏–∑ –æ—Ç–≤–µ—Ç–∞. –û—Ç–≤–µ—Ç: {token_data}")
            logger.error(f"Avito: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å 'access_token' –∏–ª–∏ 'expires_in' –∏–∑ –æ—Ç–≤–µ—Ç–∞. –û—Ç–≤–µ—Ç: {token_data}")
            return None
    except requests.exceptions.RequestException as e:
        st.error(f"Avito: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        logger.error(f"Avito: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        if hasattr(e, 'response') and e.response is not None:
            try:
                st.json(e.response.json())
                logger.error(f"Avito: –¢–µ–ª–æ –æ—à–∏–±–∫–∏: {e.response.json()}")
            except ValueError:
                st.text(e.response.text)
                logger.error(f"Avito: –¢–µ–ª–æ –æ—à–∏–±–∫–∏ (–Ω–µ JSON): {e.response.text}")
        return None

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π Huntflow –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–ª–∏ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
if not st.session_state.huntflow_vacancies_list:
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ Huntflow..."):
        st.session_state.huntflow_vacancies_list, st.session_state.huntflow_vacancies_details = fetch_huntflow_vacancies_api()

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ UI ---
common_ui.display_sidebar(config, update_address_weight_callback)

# --- –ë–õ–û–ö: –í—ã–±–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ Huntflow –∏ —Ñ–æ—Ä–º–∞ –≤–≤–æ–¥–∞ ---
st.header("–í—ã–±–æ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–±–æ—Ä–∞")
if st.session_state.huntflow_vacancies_list:
    vacancy_options = ["-- –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é --"] + [name for name, _ in st.session_state.huntflow_vacancies_list]
    selected_vacancy_display_name = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –∏–∑ Huntflow (–¥–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –Ω–∏–∂–µ):",
        options=vacancy_options,
        index=0, # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "-- –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é --"
        key="hf_vacancy_selectbox_selector" 
    )

    if selected_vacancy_display_name != "-- –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é --":
        selected_idx_in_hf_list = next((i for i, (name, _id) in enumerate(st.session_state.huntflow_vacancies_list) if name == selected_vacancy_display_name), -1)

        if selected_idx_in_hf_list != -1:
            newly_selected_hf_id = st.session_state.huntflow_vacancies_list[selected_idx_in_hf_list][1]
            if st.session_state.selected_huntflow_vacancy_id != newly_selected_hf_id:
                st.session_state.selected_huntflow_vacancy_id = newly_selected_hf_id
                details = st.session_state.huntflow_vacancies_details.get(newly_selected_hf_id)
                logger.debug(f"–í—ã–±—Ä–∞–Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—è c ID: {newly_selected_hf_id}, –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ: {details}") # –û—Å—Ç–∞–≤–∏–ª –≤–∞—à –ª–æ–≥–≥–µ—Ä

                if details:
                    # 1. –î–æ–ª–∂–Ω–æ—Å—Ç—å
                    st.session_state.vacancy_form_title = details.get("position", "")
                    
                    required_texts = []
                    education_req = details.get("education")
                    if education_req and isinstance(education_req, str):
                        required_texts.append(f"–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {education_req.strip()}")
                    
                    experience_req = details.get("experience_position")
                    if experience_req and isinstance(experience_req, str):
                        required_texts.append(f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–ø—ã—Ç—É: {experience_req.strip()}")

                    if required_texts:
                        st.session_state.vacancy_form_required = "\n\n".join(required_texts)
                    else:
                        st.session_state.vacancy_form_required = "" 
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ID {newly_selected_hf_id}. –ü–æ–ª—è 'education' –∏ 'experience_position' –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ —Å—Ç—Ä–æ–∫–∏.")

                    location_format_texts = []
                    region_rusal_id = details.get("region_rusal")
                    if region_rusal_id:
                        location_format_texts.append(f"–†–µ–≥–∏–æ–Ω –†—É—Å–∞–ª (ID): {region_rusal_id}")
                    
                    # –§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á—å –∏–∑ "contract"
                    contract_type = details.get("contract")
                    if contract_type and isinstance(contract_type, str):
                        location_format_texts.append(f"–¢–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞: {contract_type.strip()}")

                    # –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞–º
                    business_trip_info = details.get("business_trip") # –í –ø—Ä–∏–º–µ—Ä–µ None
                    if business_trip_info and isinstance(business_trip_info, str): # –∏–ª–∏ –µ—Å–ª–∏ —ç—Ç–æ boolean
                        location_format_texts.append(f"–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏: {business_trip_info}")
                    elif isinstance(business_trip_info, bool):
                        location_format_texts.append(f"–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏: {'–î–∞' if business_trip_info else '–ù–µ—Ç'}")


                    if location_format_texts:
                        st.session_state.vacancy_form_location = "\n".join(location_format_texts)
                    else:
                        st.session_state.vacancy_form_location = ""
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ–∫–∞—Ü–∏–∏/—Ñ–æ—Ä–º–∞—Ç–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ID {newly_selected_hf_id}.")

                    # 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
                    #    –°—é–¥–∞ –º–æ–∂–Ω–æ –ø–æ–º–µ—Å—Ç–∏—Ç—å 
                    #    –ü–æ–ª–µ "status" —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≤–∫–ª—é—á–∞—è HTML.
                    #    –ü–æ–ª–µ "notes" (–≤ –ø—Ä–∏–º–µ—Ä–µ None).
                    #    –ü–æ–ª—è "language_main", "proficiency_level_main".
                    #    –ü–æ–ª–µ "benefits" (–≤ –ø—Ä–∏–º–µ—Ä–µ None).
                    
                    optional_texts = []

                    language_main = details.get("language_main")
                    proficiency_level_main = details.get("proficiency_level_main")
                    if language_main and isinstance(language_main, str) and language_main.lower() != '–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è':
                        lang_text = f"–û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫: {language_main.strip()}"
                        if proficiency_level_main and isinstance(proficiency_level_main, str):
                            lang_text += f" (–£—Ä–æ–≤–µ–Ω—å: {proficiency_level_main.strip()})"
                        optional_texts.append(lang_text)

                    benefits_info = details.get("benefits") # –í –ø—Ä–∏–º–µ—Ä–µ None
                    if benefits_info and isinstance(benefits_info, str):
                        optional_texts.append(f"–£—Å–ª–æ–≤–∏—è –∏ –±–µ–Ω–µ—Ñ–∏—Ç—ã: {benefits_info.strip()}")
                    
                    notes_info = details.get("notes") # –í –ø—Ä–∏–º–µ—Ä–µ None
                    if notes_info and isinstance(notes_info, str):
                        optional_texts.append(f"–ó–∞–º–µ—Ç–∫–∏: {notes_info.strip()}")

                    # –ü–æ–ª–µ "status" —Å–æ–¥–µ—Ä–∂–∏—Ç HTML, –µ–≥–æ –Ω—É–∂–Ω–æ –æ—á–∏—â–∞—Ç—å.
                    # status_html = details.get("status")
                    # if status_html:
                    #     from bs4 import BeautifulSoup # –ü–æ—Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏: pip install beautifulsoup4
                    #     soup = BeautifulSoup(status_html, "html.parser")
                    #     status_text = soup.get_text(separator="\n").strip()
                    #     if status_text: # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ —á—Ç–æ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å
                    #          optional_texts.append(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∏–∑ status):\n{status_text}")
                    
                    if optional_texts:
                        st.session_state.vacancy_form_optional = "\n\n".join(optional_texts)
                    else:
                        st.session_state.vacancy_form_optional = ""

                    st.toast(f"–ü–æ–ª—è –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤–∞–∫–∞–Ω—Å–∏–µ–π: {details.get('position')}", icon="‚ÑπÔ∏è")
                    st.rerun() # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º, —á—Ç–æ–±—ã –≤–∏–¥–∂–µ—Ç—ã –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
                else: # –ï—Å–ª–∏ details –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (—Ö–æ—Ç—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å, –µ—Å–ª–∏ ID –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ)
                    logger.error(f"–î–µ—Ç–∞–ª–∏ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ID {newly_selected_hf_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ st.session_state.huntflow_vacancies_details")
                    # –ú–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –ø–æ–ª—è –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
                    st.session_state.vacancy_form_title = "" 
                    st.session_state.vacancy_form_required = ""
                    st.session_state.vacancy_form_location = ""
                    st.session_state.vacancy_form_optional = ""
                    # st.rerun() # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Å–±—Ä–æ—Å –æ—Ç—Ä–∞–∑–∏–ª—Å—è

        else: 
            if st.session_state.selected_huntflow_vacancy_id is not None: # –°–±—Ä–∞—Å—ã–≤–∞–µ–º, –µ—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞, –∞ —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                st.session_state.selected_huntflow_vacancy_id = None
                # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π
                st.session_state.vacancy_form_title = "" 
                st.session_state.vacancy_form_required = ""
                st.session_state.vacancy_form_location = ""
                st.session_state.vacancy_form_optional = ""
                st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ '{selected_vacancy_display_name}'. –ü–æ–ª—è —Å–±—Ä–æ—à–µ–Ω—ã.")
                st.rerun() # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º, —á—Ç–æ–±—ã —Å–±—Ä–æ—Å –æ—Ç—Ä–∞–∑–∏–ª—Å—è

    elif selected_vacancy_display_name == "-- –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é --" and st.session_state.selected_huntflow_vacancy_id is not None:
        st.session_state.selected_huntflow_vacancy_id = None 
        st.session_state.vacancy_form_title = "" 
        st.session_state.vacancy_form_required = ""
        st.session_state.vacancy_form_location = ""
        st.session_state.vacancy_form_optional = ""
        st.toast("–ü–æ–ª—è —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä—É—á–Ω—É—é.", icon="‚úçÔ∏è")
        st.rerun()

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤–≤–æ–¥–∞ (–ê–°–ü–ü –∏–ª–∏ –ü—Ä–æ—Ñ) ---
vacancy_input_data = None
if current_mode == Mode.MASS:
    st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ (–ê–°–ü–ü)")
    vacancy_input_data = mass_ui.display_mass_input_form() 
elif current_mode == Mode.PROF:
    st.header("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    vacancy_input_data = prof_ui.display_prof_input_form()

if st.button("–ü–æ–¥–æ–±—Ä–∞—Ç—å", type="primary"):
    if not vacancy_input_data:
        st.warning("–î–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç —Ñ–æ—Ä–º—ã –≤–≤–æ–¥–∞.")
    
    if not vacancy_input_data:
        st.warning("–†–µ–∂–∏–º –ø–æ–¥–±–æ—Ä–∞ –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.")
    elif (
        vacancy_input_data.get("–î–æ–ª–∂–Ω–æ—Å—Ç—å")
        and vacancy_input_data.get("required")
        and vacancy_input_data.get("location")
    ):
        st.session_state["computed"] = False
        
        selected_date_threshold = st.session_state.selected_date_threshold
        threshold_from_slider = st.session_state.current_threshold 
        distance_option_val = st.session_state.distance_option
        is_vahta_val = st.session_state.vahta_mode
        
        if current_mode == Mode.PROF:
            st.info("–õ–æ–≥–∏–∫–∞ –ø—Ä–æ—Ñ. –ø–æ–¥–±–æ—Ä–∞ –µ—â–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
            st.stop() 
        else: # Mode.MASS
            df_cv_path = Path(config.get("data", {}).get("cv_path_mass", "data/processed/mass/candidates_hh.csv"))
            df_cv = load_data(str(df_cv_path))
            if df_cv.empty:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ {df_cv_path}.")
                st.stop()
            if "address" in df_cv.columns: # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                 df_cv = df_cv.rename(columns={"address": "–ê–¥—Ä–µ—Å"})

        with st.status("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏..."):
            vacancy_processed = selector.preprocess_vacancy(deepcopy(vacancy_input_data)) 
        
        with st.status("–ü–æ–¥–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤..."):
            use_cache = not (not Path("./tmp_cvs.csv").exists() or config["general"]["mode"] == "prod")
            
            if not use_cache:
                st.write(f"–ü–µ—Ä–≤–∞—è —Ñ–∞–∑–∞: –∞–Ω–∞–ª–∏–∑ {df_cv.shape[0]} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
                max_distance_filter = None
                if distance_option_val != "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π":
                    max_distance_filter = float(distance_option_val)

                current_first_stage_weights = deepcopy(config["model"]["stage_1"]["weights"]) 
                if is_vahta_val:
                    if len(current_first_stage_weights) > 1: 
                        current_first_stage_weights[1] = 0.0
                    else:
                        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω—É–ª–∏—Ç—å –≤–µ—Å '–ê–¥—Ä–µ—Å' –¥–ª—è 1-–≥–æ —ç—Ç–∞–ø–∞.")

                df_ranked_1st = selector.rank_first_stage(
                    vacancy=vacancy_processed, 
                    df_relevant=df_cv.copy(),
                    date_threshold=selected_date_threshold, 
                    is_vahta=is_vahta_val, 
                    max_distance_filter=max_distance_filter,
                    first_stage_weights=np.array(current_first_stage_weights),
                )
                st.write(f"–í—Ç–æ—Ä–∞—è —Ñ–∞–∑–∞: –∞–Ω–∞–ª–∏–∑ {df_ranked_1st.shape[0]} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤..")

                df_ranked_2nd, vacancy_prep_for_display, nan_mask_for_display = selector.rank_second_stage(
                    vacancy=vacancy_processed,
                    df_relevant=df_ranked_1st.copy(),
                    df_weights=st.session_state["df_weights"], 
                    score_threshold_stage_2=threshold_from_slider 
                )
                if config["general"]["mode"] != "prod":
                    df_ranked_2nd.to_csv("./tmp_cvs.csv", index=False)
                    with open("./tmp_vac.json", "w", encoding='utf-8') as f:
                        json.dump(vacancy_prep_for_display, f, ensure_ascii=False)
                    np.save("./tmp_mask.npy", nan_mask_for_display)
            else:
                st.write("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –∫—ç—à–∞...")
                df_ranked_2nd = pd.read_csv("./tmp_cvs.csv")
                with open("./tmp_vac.json", "r", encoding='utf-8') as f:
                    vacancy_prep_for_display = json.load(f)
                nan_mask_for_display = np.load("./tmp_mask.npy")

            st.session_state.data_cv_dict = df2dict(df_ranked_2nd) 
            st.session_state.vacancy_prep_for_display = vacancy_prep_for_display
            st.session_state.nan_mask_for_display = nan_mask_for_display
            st.session_state["computed"] = True
            st.write(f"–í—ã–±—Ä–∞–Ω–æ {df_ranked_2nd.shape[0]} –ª—É—á—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
            st.rerun() # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏–∂–µ –∫–Ω–æ–ø–∫–∏
            
    else:
        st.error(
            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è', '–õ–æ–∫–∞—Ü–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã'",
            icon="üö®",
        )
if st.session_state.get("computed", False):
    data_cv_to_display = st.session_state.get("data_cv_dict", {})
    vacancy_prep_to_display = st.session_state.get("vacancy_prep_for_display", {})
    nan_mask_to_display = st.session_state.get("nan_mask_for_display", np.array([]))

    if not data_cv_to_display:
        st.info("–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    else:
        if current_mode == Mode.MASS:
            if "model" in config and "stage_2" in config["model"] and "ranking_features" in config["model"]["stage_2"]:
                 mass_ui.display_mass_results(
                    data_cv_to_display, 
                    vacancy_prep_to_display, 
                    config, 
                    nan_mask_to_display
                )
            else:
                st.error("–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        elif current_mode == Mode.PROF:
            prof_ui.display_prof_results(
                data_cv_to_display, 
                vacancy_prep_to_display, 
                config, 
                nan_mask_to_display
            )
        
        
        st.markdown("---") 
        st.subheader("–î–µ–π—Å—Ç–≤–∏—è —Å –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏")

        if not data_cv_to_display: # –î–æ–±–∞–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É, –µ—Å–ª–∏ data_cv_to_display –ø—É—Å—Ç
            st.info("–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π.")
        else:
            for candidate_key, candidate_ml_data in data_cv_to_display.items(): # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª candidate_data –≤ candidate_ml_data –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
                if not isinstance(candidate_ml_data, dict):
                    logger.warning(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {candidate_key} –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º, –ø—Ä–æ–ø—É—Å–∫.")
                    continue

                cols = st.columns([3, 1]) # –ò–∑–º–µ–Ω–∏–ª —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏, –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
                with cols[0]:
                    cand_display_name = candidate_ml_data.get("–î–æ–ª–∂–Ω–æ—Å—Ç—å", f"–ö–∞–Ω–¥–∏–¥–∞—Ç ID: {candidate_key}")
                    # –ü–æ–ø—ã—Ç–∫–∞ –≤–∑—è—Ç—å –§–ò–û, –µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ –¥–æ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ü–î, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                    if candidate_ml_data.get("–§–ò–û"):
                        cand_display_name = f"{candidate_ml_data.get('–§–ò–û')} ({cand_display_name})"

                    cand_score = candidate_ml_data.get("sim_score_second", 0)
                    if isinstance(cand_score, (float, int)) and not isinstance(cand_score, bool):
                        cand_score_perc = round(cand_score * 100 if cand_score <= 1.0 and cand_score !=0 else cand_score)
                    else:
                        cand_score_perc = "N/A"
                    st.markdown(f"**{cand_display_name}** (–°–∫–æ—Ä–∏–Ω–≥: {cand_score_perc}%)")
                
                with cols[1]:
                    action_button_key = f"action_btn_{candidate_key}" # –£–ø—Ä–æ—Å—Ç–∏–ª –∫–ª—é—á –∫–Ω–æ–ø–∫–∏
                    
                    if st.button("–†–∞—Å–∫—Ä—ã—Ç—å –ü–î –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Huntflow", key=action_button_key, help=f"–†–∞—Å–∫—Ä—ã—Ç—å –ü–î –∏ —Å–æ–∑–¥–∞—Ç—å {cand_display_name} –≤ Huntflow"):
                        st.markdown(f"--- \n_–û–±—Ä–∞–±–æ—Ç–∫–∞: {cand_display_name}..._")
                        
                        with st.spinner(f"–†–∞–±–æ—Ç–∞–µ–º —Å {cand_display_name}..."):
                            pii_data_raw = None
                            access_token_ext = None # Access token –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ API (HH/Avito)
                            
                            candidate_link = candidate_ml_data.get("link")
                            source_type, resume_id_from_link = parse_resume_link(candidate_link)

                            if not source_type or not resume_id_from_link:
                                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏—Å—Ç–æ—á–Ω–∏–∫/ID –∏–∑ —Å—Å—ã–ª–∫–∏: {candidate_link}")
                                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è {cand_display_name}: {candidate_link}")
                                continue 
                            
                            logger.info(f"–î–ª—è {cand_display_name}: –∏—Å—Ç–æ—á–Ω–∏–∫='{source_type}', ID='{resume_id_from_link}'")

                            # 1. –ü–æ–ª—É—á–∞–µ–º Access Token –∏ –∑–∞—Ç–µ–º PII
                            if source_type == "hh":
                                # access_token_ext = get_hh_oauth_token()
                                access_token_ext = st.secrets.get("HH_API_TOKEN")
                                if access_token_ext:
                                    pii_data_raw = get_hh_contacts_api(resume_id_from_link, access_token_ext)
                            elif source_type == "avito":
                                access_token_ext = get_avito_oauth_token()
                                if access_token_ext:
                                    pii_data_raw = get_avito_contacts_api(resume_id_from_link, access_token_ext)
                            else:
                                st.warning(f"–ò—Å—Ç–æ—á–Ω–∏–∫ '{source_type}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –ü–î.")
                                logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ '{source_type}' –¥–ª—è {cand_display_name}")
                                continue
                            
                            if not access_token_ext:
                                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Access Token –¥–ª—è {source_type.upper()}.")
                                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Access Token {source_type.upper()} –¥–ª—è {cand_display_name}")
                                continue
                            
                            if not pii_data_raw:
                                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ü–î –¥–ª—è {cand_display_name} –∏–∑ {source_type.upper()}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–≤–æ—Ç—ã –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–∑—é–º–µ.")
                                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ü–î {source_type.upper()} –¥–ª—è {cand_display_name} (ID: {resume_id_from_link})")
                                continue
                            
                            st.success(f"–ü–î –¥–ª—è {cand_display_name} –∏–∑ {source_type.upper()} –ø–æ–ª—É—á–µ–Ω—ã.")
                            logger.info(f"–ü–î –¥–ª—è {cand_display_name} ({source_type.upper()}) –ø–æ–ª—É—á–µ–Ω—ã.")
                            pii_standardized = _extract_pii_details(pii_data_raw, source_type.upper()) # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –¥–ª—è _extract_pii_details
                            
                            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ü–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                            st.write("–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ü–î:")
                            st.json(pii_standardized)
                            

                            hf_app_id, err_create = create_huntflow_applicant_api(pii_standardized, candidate_ml_data, resume_id_from_link, source_type.upper())
                            err_create = True
                            st.success(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ Huntflow –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤.")
                            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ Huntflow: {hf_app_id} –ó–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤.")
                            if err_create:
                                st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {cand_display_name} –≤ Huntflow: {err_create}")
                                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {cand_display_name} –≤ Huntflow: {err_create}")
                                continue
                            st.success(f"–ö–∞–Ω–¥–∏–¥–∞—Ç {cand_display_name} —Å–æ–∑–¥–∞–Ω –≤ Huntflow (ID: {hf_app_id}).")
                            logger.info(f"–ö–∞–Ω–¥–∏–¥–∞—Ç {cand_display_name} —Å–æ–∑–¥–∞–Ω –≤ Huntflow (ID: {hf_app_id}).")

                            # 3. –ó–∞–ø–æ–ª–Ω—è–µ–º –∞–Ω–∫–µ—Ç—É (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                            ok_q, err_q = fill_huntflow_questionary_api(hf_app_id, candidate_ml_data)
                            if err_q: 
                                st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã {cand_display_name} –≤ Huntflow: {err_q}")
                                logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∫–µ—Ç—ã {cand_display_name} –≤ Huntflow: {err_q}")
                            else: 
                                st.info(f"–ê–Ω–∫–µ—Ç–∞ –¥–ª—è {cand_display_name} –≤ Huntflow –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
                                logger.info(f"–ê–Ω–∫–µ—Ç–∞ –¥–ª—è {cand_display_name} –≤ Huntflow –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")

                            # 4. –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –≤–∞–∫–∞–Ω—Å–∏–∏
                            current_hf_vacancy_id = st.session_state.get("selected_huntflow_vacancy_id")
                            if current_hf_vacancy_id:
                                # score_perc —É–∂–µ –±—ã–ª —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –∫–∞–∫ cand_score_perc
                                ok_link, err_link = link_applicant_to_vacancy_api(hf_app_id, current_hf_vacancy_id, cand_score_perc if cand_score_perc != "N/A" else 0)
                                if err_link: 
                                    st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ {cand_display_name} –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ HF {current_hf_vacancy_id}: {err_link}")
                                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ {cand_display_name} –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ HF {current_hf_vacancy_id}: {err_link}")
                                else: 
                                    st.info(f"{cand_display_name} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ HF {current_hf_vacancy_id}.")
                                    logger.info(f"{cand_display_name} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ HF {current_hf_vacancy_id}.")
                            else:
                                st.info(f"{cand_display_name} –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω (–≤–∞–∫–∞–Ω—Å–∏—è Huntflow –Ω–µ –≤—ã–±—Ä–∞–Ω–∞).")
                                logger.info(f"{cand_display_name} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞–∫–∞–Ω—Å–∏–∏ HF (–Ω–µ –≤—ã–±—Ä–∞–Ω–∞).")
                            
                            st.success(f"–ö–∞–Ω–¥–∏–¥–∞—Ç {cand_display_name} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è Huntflow!")
                            logger.info(f"–ö–∞–Ω–¥–∏–¥–∞—Ç {cand_display_name} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è Huntflow!")
                            # st.session_state[f"processed_hf_{candidate_key}"] = True # –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
                            st.markdown("---")
                            # st.rerun() # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å UI –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É)