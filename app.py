# app.py
import json
from pathlib import Path
import numpy as np
import pandas as pd
import streamlit as st
from copy import deepcopy
from loguru import logger
import datetime # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç

# –ò–º–ø–æ—Ä—Ç –≤–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from src.utils.utils import Mode, load_data, load_model, df2dict
from src.ui import common_ui, mass_ui, prof_ui

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Session State ---
if "computed" not in st.session_state:
    st.session_state["computed"] = False
if "vahta_mode" not in st.session_state:
    st.session_state["vahta_mode"] = False
if "distance_option" not in st.session_state:
    st.session_state["distance_option"] = "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
if "original_address_weight" not in st.session_state: # –î–ª—è –∫–æ–ª–ª–±—ç–∫–∞
    st.session_state.original_address_weight = None

st.title("–ü–æ–¥–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ üíº") # –ò–∑–º–µ–Ω–∏–ª –¥–ª—è –æ–±—â–Ω–æ—Å—Ç–∏, –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å

current_mode = Mode.MASS # –ü–æ–∫–∞ –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–µ–º –º–∞—Å—Å–æ–≤—ã–π –ø–æ–¥–±–æ—Ä

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ ---
if current_mode == Mode.PROF:
    # vacancy_df = load_data(path="./data/vacancies.csv") # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π
    selector, config = load_model(config_path="./config/config.yaml")
else: # Mode.MASS
    # vacancy_df = load_data(path="./data_mass/vacancies.csv") # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω
    selector, config = load_model(config_path="./config/config_mass.yaml")

if not selector or not config:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –†–∞–±–æ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    st.stop()

if 'current_threshold' not in st.session_state: # –ü–æ—Ä–æ–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    st.session_state['current_threshold'] = config["model"]["stage_2"]["score_threshold"]


# --- Callback –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞ "–í–∞—Ö—Ç–∞" ---
def update_address_weight_callback():
    try:
        df = st.session_state["df_weights"]
        is_vahta = st.session_state["vahta_mode"]

        address_index_list = df.index[df['–ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∞'] == '–ê–¥—Ä–µ—Å'].tolist()
        if not address_index_list: return
        address_index = address_index_list[0]
        current_weight = df.loc[address_index, '–í–µ—Å']

        if is_vahta:
            if current_weight != 0.0:
                st.session_state.original_address_weight = current_weight
                df.loc[address_index, '–í–µ—Å'] = 0.0
                st.toast("–í–µ—Å '–ê–¥—Ä–µ—Å' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 0 (–í–∞—Ö—Ç–∞).", icon="‚ö†Ô∏è")
        else:
            if st.session_state.original_address_weight is not None:
                if current_weight == 0.0: # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª –æ–±–Ω—É–ª–µ–Ω
                    df.loc[address_index, '–í–µ—Å'] = st.session_state.original_address_weight
                    st.toast(f"–í–µ—Å '–ê–¥—Ä–µ—Å' –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {st.session_state.original_address_weight}", icon="üëç")
        st.session_state["df_weights"] = df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Å–∞ '–ê–¥—Ä–µ—Å': {e}")

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ UI ---
common_ui.display_sidebar(config, update_address_weight_callback)

vacancy_input_data = None
if current_mode == Mode.MASS:
    st.header("–ú–∞—Å—Å–æ–≤—ã–π –ø–æ–¥–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    vacancy_input_data = mass_ui.display_mass_input_form()
elif current_mode == Mode.PROF:
    st.header("–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    vacancy_input_data = prof_ui.display_prof_input_form() # –ü–æ–∫–∞ –≤–µ—Ä–Ω–µ—Ç None

# --- –õ–æ–≥–∏–∫–∞ –ø–æ–¥–±–æ—Ä–∞ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ ---
if st.button("–ü–æ–¥–æ–±—Ä–∞—Ç—å", type="primary"):
    if not vacancy_input_data:
        st.warning("–†–µ–∂–∏–º –ø–æ–¥–±–æ—Ä–∞ –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.")
    elif (
        vacancy_input_data.get("–î–æ–ª–∂–Ω–æ—Å—Ç—å")
        and vacancy_input_data.get("required")
        and vacancy_input_data.get("location")
    ):
        st.session_state["computed"] = False # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–æ–¥–±–æ—Ä–æ–º
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ session_state, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤ —Å–∞–π–¥–±–∞—Ä–µ
        selected_date_threshold = st.session_state.selected_date_threshold
        threshold_from_slider = st.session_state.current_threshold # –≠—Ç–æ –∏ –µ—Å—Ç—å –Ω–∞—à score_threshold_stage_2
        distance_option_val = st.session_state.distance_option
        is_vahta_val = st.session_state.vahta_mode
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è —Ä–µ–∂–∏–º–∞)
        if current_mode == Mode.PROF:
            st.info("–õ–æ–≥–∏–∫–∞ –ø—Ä–æ—Ñ. –ø–æ–¥–±–æ—Ä–∞ –µ—â–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
            st.stop() # –ü–æ–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏–º –∑–¥–µ—Å—å –¥–ª—è –ø—Ä–æ—Ñ —Ä–µ–∂–∏–º–∞
        else: # Mode.MASS
            df_cv = load_data(f"data/processed/mass/candidates_hh.csv")
            if df_cv.empty:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
                st.stop()
            df_cv = df_cv.rename(columns={"address": "–ê–¥—Ä–µ—Å"})

        with st.status("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏..."):
            vacancy_processed = selector.preprocess_vacancy(deepcopy(vacancy_input_data)) # –ò—Å–ø–æ–ª—å–∑—É–µ–º deepcopy
        
        with st.status("–ü–æ–¥–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤..."):
            # --- –õ–æ–≥–∏–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é) ---
            use_cache = not (not Path("./tmp_cvs.csv").exists() or config["general"]["mode"] == "prod")
            
            if not use_cache:
                st.write(f"–ü–µ—Ä–≤–∞—è —Ñ–∞–∑–∞: –∞–Ω–∞–ª–∏–∑ {df_cv.shape[0]} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
                
                max_distance_filter = None
                if distance_option_val != "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π":
                    max_distance_filter = float(distance_option_val)

                # –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞ –∏–∑ st.session_state["df_weights"] –¥–ª—è 2–≥–æ —ç—Ç–∞–ø–∞
                # –î–ª—è 1–≥–æ —ç—Ç–∞–ø–∞ –≤–µ—Å–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑ config –∏–ª–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã "–í–∞—Ö—Ç–æ–π"
                current_first_stage_weights = deepcopy(config["model"]["stage_1"]["weights"]) # –ö–æ–ø–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –∫–æ–Ω—Ñ–∏–≥
                if is_vahta_val:
                    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤–µ—Å "–ê–¥—Ä–µ—Å" –Ω–∞ 1-–º —ç—Ç–∞–ø–µ - –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç (–∏–Ω–¥–µ–∫—Å 1)
                    # –≠—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–µ—Å–æ–≤ –¥—Ä—É–≥–∞—è
                    if len(current_first_stage_weights) > 1: 
                        current_first_stage_weights[1] = 0.0
                    else:
                        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω—É–ª–∏—Ç—å –≤–µ—Å '–ê–¥—Ä–µ—Å' –¥–ª—è 1-–≥–æ —ç—Ç–∞–ø–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–µ—Å–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥–µ.")


                df_ranked_1st = selector.rank_first_stage(
                    vacancy=vacancy_processed, 
                    df_relevant=df_cv.copy(),
                    date_threshold=selected_date_threshold, 
                    is_vahta=is_vahta_val, 
                    max_distance_filter=max_distance_filter,
                    first_stage_weights=np.array(current_first_stage_weights),
                )
                st.write(f"–í—Ç–æ—Ä–∞—è —Ñ–∞–∑–∞: –∞–Ω–∞–ª–∏–∑ {df_ranked_1st.shape[0]} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤..")

                df_ranked_2nd, vacancy_prep_for_display, nan_mask_for_display = selector.rank_second_stage(
                    vacancy=vacancy_processed,
                    df_relevant=df_ranked_1st.copy(),
                    df_weights=st.session_state["df_weights"], # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞ –∏–∑ —Å–∞–π–¥–±–∞—Ä–∞
                    score_threshold_stage_2=threshold_from_slider # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –∏–∑ —Å–∞–π–¥–±–∞—Ä–∞
                )
                if config["general"]["mode"] != "prod":
                    df_ranked_2nd.to_csv("./tmp_cvs.csv", index=False)
                    with open("./tmp_vac.json", "w", encoding='utf-8') as f:
                        json.dump(vacancy_prep_for_display, f, ensure_ascii=False)
                    np.save("./tmp_mask.npy", nan_mask_for_display)
            else:
                st.write("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ –∫—ç—à–∞...")
                df_ranked_2nd = pd.read_csv("./tmp_cvs.csv")
                with open("./tmp_vac.json", "r", encoding='utf-8') as f:
                    vacancy_prep_for_display = json.load(f)
                nan_mask_for_display = np.load("./tmp_mask.npy")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ session_state –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            st.session_state.data_cv_dict = df2dict(df_ranked_2nd) # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ dict –¥–ª—è UI
            st.session_state.vacancy_prep_for_display = vacancy_prep_for_display
            st.session_state.nan_mask_for_display = nan_mask_for_display
            st.session_state["computed"] = True
            st.write(f"–í—ã–±—Ä–∞–Ω–æ {df_ranked_2nd.shape[0]} –ª—É—á—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
            st.rerun() # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏–∂–µ –∫–Ω–æ–ø–∫–∏
            
    else:
        st.error(
            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è', '–õ–æ–∫–∞—Ü–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã'",
            icon="üö®",
        )

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è) ---
if st.session_state.get("computed", False):
    data_cv_to_display = st.session_state.get("data_cv_dict", {})
    vacancy_prep_to_display = st.session_state.get("vacancy_prep_for_display", {})
    nan_mask_to_display = st.session_state.get("nan_mask_for_display", np.array([]))

    if not data_cv_to_display:
        st.info("–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    else:
        if current_mode == Mode.MASS:
            if "model" in config and "stage_2" in config["model"] and "ranking_features" in config["model"]["stage_2"]:
                 mass_ui.display_mass_results(
                    data_cv_to_display, 
                    vacancy_prep_to_display, 
                    config, # –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å config, —Ç.–∫. display_mass_results –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
                    nan_mask_to_display
                )
            else:
                st.error("–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

        elif current_mode == Mode.PROF:
            # –î–ª—è –ø—Ä–æ—Ñ. —Ä–µ–∂–∏–º–∞ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∞—è –º–∞—Å–∫–∞ –∏–ª–∏ –µ–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞
            # nan_mask_prof = np.delete(nan_mask_to_display, [1, 2, 5]) # –ü—Ä–∏–º–µ—Ä –∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞
            prof_ui.display_prof_results(
                data_cv_to_display, 
                vacancy_prep_to_display, 
                config, 
                nan_mask_to_display # –∏–ª–∏ nan_mask_prof
            )